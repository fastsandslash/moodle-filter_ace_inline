<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 29124  -->
  <question type="description">
    <name>
      <text>TestAceInline</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h1><span style="font-size: 2.34375rem;">A Test/Demo of the Ace-inline Filter</span><br></h1>
<p>This 'description question' isn't really a question at all, just an HTML page that documents an demonstrates various uses of the Ace-inline filter. To see how the different effects are produced you can view the source of the page in your browser.</p>
<h2>Highlighting code</h2>
<p>The simplest use of the filter is to let the Ace editor do syntax colouring of code. This is achieved by putting the code into a HTML &lt;pre&gt; element with the class <em>ace-highlight-code</em>. The default language is python; if you want another language you should add to the pre element an attribute like <em>data-lang="java"</em>. Here are two examples, the first in Python, the second in Java.</p>
<h3>A python example</h3>
<pre class="ace-highlight-code">print("Some squares")
for i in range(10):
    print(i, i ** 2)</pre>

<h3>A Java example</h3>
<pre class="ace-highlight-code" data-lang="java">public class hello {
    public static void main(String[] args) {
        System.out.println("Hello world!");
    }
}</pre>
<p>Note: for strict HTML5 compliance, all non-standard element attributes must be prefixed with 'data-', which is why the language attribute is called 'data-lang' rather than just 'lang'. However, if you don't care about such compliance, you can drop the prefix; the code will still work but will not pass HTML5 validator checks. All code in this test/demo question use the full 'data-' form for attributes.
</p>
<h2>Options for highlighting</h2>
<p>Line numbers are not shown by default, but an attribute <em>data-start-line-number</em> can be added to set the line number to use on the first line. Its default value is <em>none</em>, resulting in no line numbers being displayed. If non-none, the usual value is '1', but other values can be used in special cases, for example if code is broken into two separate highlighted segments.</p>
<p>There is also an optional attribute <em>data-font-size</em> to set the font size within the Ace editor.</p>
<p>The following example shows the Java hello world program with line numbers starting at 5 and a font-size of 16 pts.</p>
<pre class="ace-highlight-code" data-lang="java" data-font-size="16pt" start-line-number="5">public class hello {
    public static void main(String[] args) {
        System.out.println("Hello world!");
    }
}</pre>
<h2>Making code interactive</h2>
<p>If the class of the HTML &lt;pre&gt; element containing the code is instead set to <em>ace-interactive-code</em>, a <em>Try it!</em> button is added below the Ace editor panel. When clicked, the code is sent to the CodeRunner sandbox (usually a Jobe server) for execution and the result is displayed below the button. The code can be edited and re-run an arbitrary number of times.</p>
<p>Here are firstly the same two examples from above, but with class <em>ace-interactive-code</em>, and then C and C++ hello world programs. An extra blank line is being displayed in these cases by moving the terminating '&lt;/pre&gt;' onto a new line rather than putting it hard up against the last non-whitespace character in the code. This makes it clear that all the editable code is being displayed, but you might prefer not to do this - your call.
</p>
<h3>A python example</h3>
<pre class="ace-interactive-code">print("Hello squares")
for i in range(10):
    print(i, i ** 2)
</pre>

<h3>A Java example</h3>
<pre class="ace-interactive-code" data-lang="java">public class hello {
    public static void main(String[] args) {
        System.out.println("Hello world!");
     }
 }
</pre>
<h2>Hello world in C</h2>
<pre class="ace-interactive-code" data-lang="c">#include &lt;stdio.h&gt;
int main() {
    puts("Hello world!");
}
</pre>
<h2>Hello world in C++</h2>
<pre class="ace-interactive-code" data-lang="cpp">#include &lt;iostream&gt;
using namespace std;
int main() {
    cout &lt;&lt; "Hello world" &lt;&lt; endl;
}
</pre>
<h2></h2>
<h2>Providing standard input (the new approved way)</h2>
<p>Using stdin in conjunction wiht ace-interactive-code samples is problematic if users are expecting an interactive prompt-read-prompt-read style of standard input. This really isn't possible with this filter because clicking Try it! simply sends a job to the jobe server for execution and then displays the results. However, the author can provide the user with a text area into which they can enter any standard input (in general, multiple lines) which are then read on demand by the program. The <em>data-stdin-taid</em>&nbsp;attribute of the &lt;pre&gt; element specifies the text area (or other HTML element with a val() method) to be used in this way. For example:</p>
<p>Standard input:</p>
<textarea id="demo-stdin" rows="4" cols="50">Here are three lines of standard input.
You can edit them yourself before
clicking the 'Try it!' button.
</textarea>
<pre class="ace-interactive-code" data-stdin-taid="demo-stdin">while 1:
    try:
        print(input())
    except EOFError:
        break
</pre>
<p>If the author wishes to provide fixed uneditable standard input they can simply hide the textarea.</p>
<h2>Providing standard input (the old deprecated way)</h2>
<p>If there is no data-stdin-taid attribute, the question author can provide a standard input string using the attribute data-stdin. Since HTML5 allows multiline literal strings, the stdin stream can be multiline too.
</p>
<p>The following example shows a Python program that reads standard input until EOF. The stdin attribute here is
</p>
<pre>Chaos reigns within.
Reflect, repent, and reboot.
Order shall return.</pre>

<pre class="ace-interactive-code" data-stdin="Chaos reigns within.
Reflect, repent, and reboot.
Order shall return.
">while 1:
    try:
        print(input())
    except EOFError:
        break
</pre>
<h2>Providing files (the new approved way)</h2>
<p>It isn't possible to have ace-interactive-code examples that read files from the user's own storage device. But in a similar way to how standard input is provided, it is possible to set up one or more text areas, the contents of which are sent to the Jobe server as files. The file names and corresponding textarea ids are specified by a JSON-valued &lt;pre&gt; attribute <em>data-file-taids</em>.</p>
<div>
    <div style="float:left; padding-right:10px;">
        <p style="margin-bottom:0px;">File 'blah.txt':</p>
        <textarea id="blah" rows="5" cols="30">blah1
blah2
blah3</textarea>
    </div>
    <div>
        <p style="margin-bottom:0px">File 'twaddle.txt':</p>
        <textarea id="twaddle" rows="5" cols="30">twaddle1
twaddle2
twaddle3</textarea>
    </div>
</div>
<pre class="ace-interactive-code" data-file-taids="{&quot;blah.txt&quot;: &quot;blah&quot;, &quot;twaddle.txt&quot;: &quot;twaddle&quot;}">with open('blah.txt') as infile1:
    lines1 = infile1.read().splitlines()
with open('twaddle.txt') as infile2:
    lines2 = infile2.read().splitlines()

print("File contents, interleaved")
for i in range(max(len(lines1), len(lines2))):
    if i &lt; len(lines1):
        print(f'File1: {lines1[i]}')
    if i &lt; len(lines2):
        print(f'File2: {lines2[i]}')
</pre>
<h2>Providing files (the old deprecated way)</h2>
<p>As with reading stdin, it is not usual to use 'ace-interactive-code' examples to read files. However, it is possible to define an attribute <em>data-files</em> which is a JSON object that provides a map from filename to file contents. Since JSON strings cannot contain newline characters, they must be represented within the JSON as '\n'.
</p>
<p>Here's a trivial example, with a 2-line file 'blah.txt':</p>
<pre class="ace-interactive-code" data-files="{&quot;blah.txt&quot;: &quot;I am line 1\nAnd I am line 2\n&quot;, &quot;blah2.txt&quot;: &quot;I am blah2&quot;}">print(open("blah.txt").read())
</pre>

<h2>The complete set of ace-interactive-code options</h2>
<p>The complete set of ace-interactive-code elements is as follows.&nbsp;Attributes in bold have not been introduced above.</p>
<table class="table table-bordered" style="width:auto">
    <tbody>
        <tr>
            <th>Attribute</th>
            <th>Meaning</th>
        </tr>
        <tr>
            <td>
                <pre>data-ace-lang</pre>
            </td>
            <td>The language to use for the Ace editor syntax highlighting, if different from the language of the job as run on Jobe. For example, the <code>data-code-mapper</code> option might be used to wrap a program in C within a Python script that is executed on Jobe.</td>
        </tr>
        <tr>
            <td>
                <pre>data-button-name</pre>
            </td>
            <td>Sets the label to use for the button instead of 'Try it!'</td>
        </tr>
        <tr>
            <td>
                <pre>data-start-line-number</pre>
            </td>
            <td>Can be set to 'none' to suppress line numbers or to an integer to start numbering with the given value</td>
        </tr>
        <tr>
            <td>
                <pre>data-readonly</pre>
            </td>
            <td>If set (to any value) the supplied code cannot be edited by the user</td>
        </tr>
        <tr>
            <td>
                <pre>data-code-mapper</pre>
            </td>
            <td>The name of a global JavaScript function (i.e. an attribute of the window object) that takes as a parameter the code from the Ace editor and returns a modified version. This can be used to perform arbitrary transformations of the code the student is writing into some other program. If prefix or suffix code is supplied (see below) it is added after the code-mapper has been used.
            </td>
        </tr>
        <tr>
            <td>
                <pre>data-dark-theme-mode</pre>
            </td>
            <td>Selects when to use a dark mode for the Ace editor. Has values 0, 1 or 2 for <em>no</em>, <em>maybe</em> and <em>yes</em>. If 1<em>&nbsp;</em>(<em>maybe</em>) is chosen, the dark theme will be used if the browser's <em>prefers-color-scheme:dark</em> media query returns a match, so this may change with browser, operating system or time of day. The default value is set by the administrator setting for the plugin.
            </td>
        </tr>
        <tr>
            <td>
                <pre>data-files (deprecated)</pre>
            </td>
            <td>A JSON string defining a mapping from filename to file contents. Deprecated in favour of <code>data-file-taids.</code>
            </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>
                <pre>data-file-taids</pre>
            </td>
            <td>A JSON string defining a mapping from filenames to textarea element IDs containing the file contents.</td>
        </tr>
        <tr>
            <td>
                <pre>data-font-size</pre>
            </td>
            <td>The font size to use in the Ace editor, e.g. '11pt'.
            </td>
        </tr>
        <tr>
            <td>
                <pre>data-html-output</pre>
            </td>
            <td>If set (to any value) the output from the program is interpreted as raw html to insert into the DOM, rather than being escaped and displayed in a &lt;p&gt; element. </td>
        </tr>
        <tr>
            <td>
                <pre>data-max-output-length</pre>
            </td>
            <td>The limit to the displayed length of stdout and stderr strings. Strings longer than this are truncated prior to display. Default: 10,000.<br></td>
        </tr>
        <tr>
            <td>
                <pre>data-params</pre>
            </td>
            <td>A JSON string of run-time parameters, passed to <a href="https://github.com/trampgeek/jobe"></a>the Jobe engine (q.v.). For example, <code>{"cputime": 5},&nbsp;</code>which is the default value of the attribute and sets a time limit of 5 seconds for the run. Rarely needed.</td>
        </tr>
        <tr>
            <td>
                <pre>data-prefix</pre>
            </td>
            <td>Defines code that will be inserted before the code from the Ace editor (so the student doesn't see it). An extra newline is not inserted between the prefix and the visible code - you must insert it explicitly if you want one.</td>
        </tr>
        <tr>
            <td>
                <pre>data-readonly</pre>
            </td>
            <td>If set, to any value, prevents the user modifying the supplied code.</td>
        </tr>
        <tr>
            <td>
                <pre>data-start-line-number</pre>
            </td>
            <td>Sets the number to use for the first line of code in the Ace editor. Default 1.</td>
        </tr>
        <tr>
            <td>
                <pre>data-stdin (deprecated)</pre>
            </td>
            <td>Defines a string to be used as standard input when the program is run. Deprecated in favour of <em>data-stdin-taid</em>
            </td>
        </tr>
        <tr>
            <td>
                <pre>data-stdin-taid</pre>
            </td>
            <td>Specifies the ID of a textarea element (or other HTML element with a jQuery <em>val()</em> method that supplies standard input to the program.
            </td>
        </tr>
        <tr>
            <td>
                <pre>data-suffix</pre>
            </td>
            <td>Defines code that will be inserted after the code from the Ace editor (so the student doesn't see it). An extra newline is not inserted between the visible code and the suffix - you must insert it explicitly if you want one.</td>
        </tr>
    </tbody>
</table>

<h2>A simple data-html-output example</h2>
<p>The following example shows how the <em>data-html-output</em> option works. It's only rarely useful in isolation but in conjunction with <em>data-code-mapper</em> and/or <em>data-prefix </em>and <em>data-suffix</em> it can be used by question authors to provide arbitrary output. The following example also changes the button name.<br></p>

<pre class="ace-interactive-code" data-html-output="" data-button-name="Let's do it!">print("&lt;h2&gt;I'm a heading&lt;/h2&gt;")
print("&lt;ol&gt;&lt;li&gt;Bullet 1&lt;/li&gt;&lt;li&gt;Bullet 2&lt;/li&gt;&lt;/ol&gt;")
</pre>

<h2>A simple use of code-mapper</h2>
<p>In this case we define (using a &lt;script&gt; element) a function called <em>doubler</em> that returns its parameter concatenated onto itself. The &lt;pre&gt; element that wraps the following code has the attribute data-code-mapper set to 'doubler'.
</p>
<script>
    function doubler(s) {
        return s + s;
    }
</script>
<pre class="ace-interactive-code" data-code-mapper="doubler">print("Hello world!")
</pre>
<h2>A simple use of data-prefix</h2>
<p>In the above example showing the use of stdin, the <em>input()</em> function was called and the result printed. But if students are using <em>input()</em> interactively, they expect to see what they enter from the keyboard echoed to the screen. To achieve such an effect in Python, prefix code could be added that simulates this echoing. For example, here's a program that asks the student for their name and age and prints a message telling them their age next year.The <em>data-stdin</em> attribute of the &lt;pre&gt; element has been set to contain the two lines 'jeremy' and '11'.
</p>
<pre class="ace-interactive-code" data-stdin="Jeremy
11
" data-prefix="_saved_input = input
def input(prompt=''):
    print(prompt, end='')
    line = _saved_input()
    print(line)
    return line
">name = input("What's your name? ")
age = int(input("How old are you? "))
print(f"Hi {name}, next year you'll be {age + 1}")
</pre>

<h2>Displaying matplotlib images</h2>
<p>By using the <em>data-code-mapper </em>option (and/or <em>data-prefix </em>and <em>data-suffix</em>) in conjunction with <em>data-html-output</em> it is possible, with some difficulty, to define an ace-interactive-code block that will let students run matplotlib code and display both the textual output from the question and any output images. Here is an example, which also shows the use of the dark-theme mode. Inspect the HTML at your peril!
</p>

<script>
    function matplotlibwrapper(code) {
        var escapedCode = code.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
        var progToRun = `import subprocess, base64, html, os

def make_data_uri(filename):
    with open(filename, "br") as fin:
        contents = fin.read()
    contents_b64 = base64.b64encode(contents).decode("utf8")
    return "data:image/png;base64,{}".format(contents_b64)

prog_to_exec = """import os, tempfile
os.environ["MPLCONFIGDIR"] = tempfile.mkdtemp()
import matplotlib as _mpl
_mpl.use("Agg")
` + escapedCode + `
figs = _mpl.pyplot.get_fignums()
for i, fig in enumerate(figs):
    _mpl.pyplot.figure(fig)
    filename = f'image{i}.png'
    _mpl.pyplot.savefig(filename, bbox_inches='tight')
"""
with open('prog.py', 'w') as outfile:
    outfile.write(prog_to_exec)

result = subprocess.run(['python3', 'prog.py'], capture_output=True, text=True)
print('<div>')
output = result.stdout + result.stderr
if output:
    output = html.escape(output).replace(' ', '&nbsp;').replace('\\n', '<br>')
    print(f'<p style="font-family:monospace;font-size:11pt;padding:5px;">{output}</p>')

for fname in os.listdir():
    if fname.endswith('png'):
        print(f'<img src="{make_data_uri(fname)}">')
`;
        return progToRun;
    }
</script>
<pre class="ace-interactive-code" data-html-output="" data-code-mapper="matplotlibwrapper" data-params="{&quot;cputime&quot;: 5}" data-dark-theme-mode="2">import matplotlib.pyplot as plt
import numpy as np

# Generate some text output
print("I am a line of output")
print("And so am I")

# Now the graph plotting
axes = plt.axes()
xs = np.linspace(0, 720, 200)
ys = np.sin(2 * np.pi * xs / 360)
axes.plot(xs, ys)
axes.set_title("y = sin(x)")
axes.set_xlabel('x (degrees)')
axes.set_ylabel('y')
axes.grid()
plt.show()
</pre>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
  </question>

</quiz>