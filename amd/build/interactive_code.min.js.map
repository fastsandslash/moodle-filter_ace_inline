{"version":3,"sources":["../src/interactive_code.js"],"names":["define","$","addUi","buttonName","editNode","aceSession","outputLines","button","outputTextarea","after","M","util","js_pending","require","ajax","on","call","methodname","args","sourcecode","getValue","language","stdin","done","responseJson","response","JSON","parse","text","cmpinfo","output","stderr","val","fail","error","alert","js_complete","applyAceInteractive","ace","root","config","codeElements","getElementsByClassName","mode","showLineNumbers","editor","numLines","i","pre","length","nodeName","hasAttribute","closest","jqpre","html","split","getAttribute","parseInt","css","width","margin","edit","get","newLineMode","maxLines","fontSize","showGutter","highlightActiveLine","$blockScrolling","session","getSession","setValue","setAttribute","hide","init","window","document"],"mappings":"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","sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for implementing the highlight_code functionality of the\n * ace_line filter (q.v.)\n *\n * @module filter_ace_inline/highlight_code\n * @copyright  Richard Lobb, 2021, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['jquery'], function($) {\n    /**\n     * Add a UI div containing a Try it! button and a text area to display the\n     * results of a button click.\n     * @param {string} buttonName The label for the button.\n     * @param {html_element} editNode The Ace edit node after which the div should be inserted.\n     * @param {object} aceSession The Ace editor session.\n     * @param {int} outputLines The number of lines to allocate to the output text area.\n     */\n    function addUi(buttonName, editNode, aceSession, outputLines) {\n        var button = $(\"<div><button type='button' class='btn btn-secondary' \" +\n                \"style='margin-bottom:6px;padding:2px 8px;'>\" + buttonName + \"</button></div>\");\n        var outputTextarea = $(\"<textarea readonly rows='\" + outputLines +\n                \"' style='font-family:monospace; font-size:12px;width:100%'></textarea>\");\n        editNode.after(button);\n        button.after(outputTextarea);\n        M.util.js_pending('core/ajax');\n        require(['core/ajax'], function(ajax) {\n            button.on('click', function() {\n                ajax.call([{\n                    methodname: 'qtype_coderunner_run_in_sandbox',\n                    args: {\n                        sourcecode: aceSession.getValue(),\n                        language: 'python3',\n                        stdin: ''\n                    },\n                    done: function(responseJson) {\n                        var response = JSON.parse(responseJson);\n                        var text = response.cmpinfo + response.output + response.stderr;\n                        outputTextarea.val(text);\n                    },\n                    fail: function(error) {\n                        alert(\"System error: please report: \" + error);\n                    }\n                }]);\n            });\n            M.util.js_complete('core/ajax');\n        });\n    }\n\n    /**\n     * Replace all <pre> elements in the document rooted at root that have\n     * class ace-interactive-code with an Ace editor windows that display the\n     * code in whatever language has been set. Also provide a Try it! button\n     * that runs the code.\n     * @param {object} ace The Ace editor code.\n     * @param {object} root The root of the HTML document to modify.\n     * @param {object} config the config parameters from the admin settings panel.\n     */\n    function applyAceInteractive(ace, root, config) {\n        var codeElements = root.getElementsByClassName('ace-interactive-code');\n        var mode = \"ace/mode/python\"; // Default is Python.\n        var outputLines = 1;\n        var showLineNumbers = true;\n        var buttonName = config['button_label'];\n        var editNode, editor, text, numLines;\n\n        for (var i=0; i < codeElements.length; i++) {\n            let pre = codeElements[i];\n            // Only do not-yet-processed PRE elements within a question\n            // (so not in author edit mode).\n            if (pre.nodeName !== 'PRE' || pre.hasAttribute('processing-done') ||\n                !pre.closest(\"div[id^='question']\")) {\n                continue;\n            }\n\n            let jqpre = $(pre);\n            text = jqpre.html();\n            numLines = text.split(\"\\n\").length;\n            if (pre.hasAttribute(\"lang\")) {\n                mode = \"ace/mode/\" + pre.getAttribute(\"lang\");\n            }\n            if (pre.hasAttribute(\"outputlines\")) {\n                outputLines = parseInt(pre.getAttribute(\"outputlines\"));\n            }\n            if (pre.hasAttribute(\"hidelinenumbers\")) {\n                showLineNumbers = false;\n            }\n            if (pre.hasAttribute(\"showlinenumbers\")) {\n                showLineNumbers = true;\n            }\n\n            if (pre.hasAttribute(\"buttonname\")) {\n                buttonName = pre.getAttribute(\"buttonname\");\n            }\n\n            editNode = $(\"<div></div>\"); // Ace editor manages this\n            editNode.css({\n                width: \"100%\",\n                margin: \"6px\",\n                \"line-height\": \"1.3\"\n            });\n\n            jqpre.after(editNode);    // Insert the edit node\n\n            editor = ace.edit(editNode.get(0), {\n                newLineMode: \"unix\",\n                mode: mode,\n                maxLines: numLines,\n                fontSize: \"11pt\",\n                showLineNumbers: showLineNumbers,\n                showGutter: showLineNumbers,\n                highlightActiveLine: showLineNumbers\n            });\n            editor.$blockScrolling = Infinity;\n\n            let session = editor.getSession();\n            session.setValue(text);\n            addUi(buttonName, editNode, session, outputLines);  // Add a button and text area for output.\n            pre.setAttribute('processing-done', '');\n            jqpre.hide();\n\n        }\n    }\n\n    return {\n        init: function(config) {\n            if (window.ace) {\n                applyAceInteractive(window.ace, document, config);\n            }\n        }\n    };\n});"],"file":"interactive_code.min.js"}