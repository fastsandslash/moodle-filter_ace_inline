{"version":3,"sources":["../src/interactive_code.js"],"names":["define","$","addUi","editNode","aceSession","uiParameters","button","outputTextarea","after","M","util","js_pending","require","ajax","on","call","methodname","args","sourcecode","getValue","language","stdin","files","params","done","responseJson","response","JSON","parse","text","cmpinfo","output","stderr","val","fail","error","alert","message","debuginfo","js_complete","applyAceInteractive","ace","root","config","codeElements","getElementsByClassName","attrName","attr","numLines","value","dataName","showLineNumbers","i","length","pre","nodeName","hasAttribute","closest","attributes","getNamedItem","toLowerCase","parseInt","jqpre","split","css","width","margin","aceConfig","newLineMode","mode","maxLines","fontSize","showGutter","highlightActiveLine","editor","edit","get","setReadOnly","$blockScrolling","session","getSession","setValue","setAttribute","hide","init","window","document"],"mappings":"AA2BAA,OAAM,sCAAC,CAAC,QAAD,CAAD,CAAa,SAASC,CAAT,CAAY,CAS3B,QAASC,CAAAA,CAAT,CAAeC,CAAf,CAAyBC,CAAzB,CAAqCC,CAArC,CAAmD,IAC3CC,CAAAA,CAAM,CAAGL,CAAC,CAAC,mGAEPI,CAAY,CAAC,aAAD,CAFL,CAEuB,iBAFxB,CADiC,CAI3CE,CAAc,CAAGN,CAAC,CAAC,4BACfI,CAAY,CAAC,cAAD,CADG,CAEf,wEAFc,CAJyB,CAO/CF,CAAQ,CAACK,KAAT,CAAeF,CAAf,EACAA,CAAM,CAACE,KAAP,CAAaD,CAAb,EACAE,CAAC,CAACC,IAAF,CAAOC,UAAP,CAAkB,WAAlB,EACAC,OAAO,CAAC,CAAC,WAAD,CAAD,CAAgB,SAASC,CAAT,CAAe,CAClCP,CAAM,CAACQ,EAAP,CAAU,OAAV,CAAmB,UAAW,CAC1BD,CAAI,CAACE,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,iCADL,CAEPC,IAAI,CAAE,CACFC,UAAU,CAAEd,CAAU,CAACe,QAAX,EADV,CAEFC,QAAQ,CAAEf,CAAY,KAFpB,CAGFgB,KAAK,CAAEhB,CAAY,MAHjB,CAIFiB,KAAK,CAAEjB,CAAY,MAJjB,CAKFkB,MAAM,CAAElB,CAAY,OALlB,CAFC,CASPmB,IAAI,CAAE,cAASC,CAAT,CAAuB,IACrBC,CAAAA,CAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWH,CAAX,CADU,CAErBI,CAAI,CAAGH,CAAQ,CAACI,OAAT,CAAmBJ,CAAQ,CAACK,MAA5B,CAAqCL,CAAQ,CAACM,MAFhC,CAGzBzB,CAAc,CAAC0B,GAAf,CAAmBJ,CAAnB,CACH,CAbM,CAcPK,IAAI,CAAE,cAASC,CAAT,CAAgB,CAClBC,KAAK,CAAC,gCAAkCD,CAAK,CAACE,OAAxC,CAAkD,GAAlD,CAAwDF,CAAK,CAACG,SAA/D,CACR,CAhBM,CAAD,CAAV,CAkBH,CAnBD,EAoBA7B,CAAC,CAACC,IAAF,CAAO6B,WAAP,CAAmB,WAAnB,CACH,CAtBM,CAuBV,CAWD,QAASC,CAAAA,CAAT,CAA6BC,CAA7B,CAAkCC,CAAlC,CAAwCC,CAAxC,CAAgD,CAO5C,OALIC,CAAAA,CAAY,CAAGF,CAAI,CAACG,sBAAL,CAA4B,sBAA5B,CAKnB,CAHIhB,CAGJ,CAHUiB,CAGV,CAHoBC,CAGpB,CAH0BC,CAG1B,CAHoCC,CAGpC,CAH2CC,CAG3C,CAFIC,CAEJ,CAASC,CAAC,CAAC,CAAX,CAAcA,CAAC,CAAGR,CAAY,CAACS,MAA/B,CAAuCD,CAAC,EAAxC,CAA4C,IACpC/C,CAAAA,CAAY,CAAG,CACf,KAAQ,SADO,CAEf,YAAa,MAFE,CAGf,eAAgB,CAHD,CAIf,oBAAqB,CAJN,CAKf,cAAesC,CAAM,aALN,CAMf,SAAY,IANG,CAOf,MAAS,EAPM,CAQf,MAAS,EARM,CASf,OAAU,EATK,CADqB,CAYpCW,CAAG,CAAGV,CAAY,CAACQ,CAAD,CAZkB,CAaxC,GAAqB,KAAjB,GAAAE,CAAG,CAACC,QAAJ,EAA0BD,CAAG,CAACE,YAAJ,CAAiB,sBAAjB,CAA1B,EACI,CAACF,CAAG,CAACG,OAAJ,CAAY,qBAAZ,CADT,CAC6C,CACzC,QACH,CAED,IAAKX,CAAL,GAAiBzC,CAAAA,CAAjB,CAA+B,CAC3B0C,CAAI,CAAGO,CAAG,CAACI,UAAJ,CAAeC,YAAf,CAA4Bb,CAA5B,CAAP,CACA,GAAIC,CAAJ,CAAU,CACNG,CAAQ,CAAGJ,CACd,CAFD,IAEO,CACHI,CAAQ,CAAG,QAAUJ,CAArB,CACAC,CAAI,CAAGO,CAAG,CAACI,UAAJ,CAAeC,YAAf,CAA4BT,CAA5B,CACV,CACD,GAAIH,CAAJ,CAAU,CACNE,CAAK,CAAGF,CAAI,CAACE,KAAb,CACA,GAAiB,mBAAb,GAAAH,CAAQ,EAAoD,MAAxB,GAAAG,CAAK,CAACW,WAAN,EAAxC,CAAwE,CACpEX,CAAK,CAAG,IACX,CAFD,IAEO,IAAiB,mBAAb,GAAAH,CAAQ,EAAyC,cAAb,GAAAA,CAAxC,CAAqE,CACxEG,CAAK,CAAGY,QAAQ,CAACZ,CAAD,CACnB,CACD5C,CAAY,CAACyC,CAAD,CAAZ,CAAyBG,CAC5B,CACJ,CACDE,CAAe,CAAG9C,CAAY,CAAC,mBAAD,CAAZ,MAAlB,CApCwC,GAqCpCyD,CAAAA,CAAK,CAAG7D,CAAC,CAACqD,CAAD,CArC2B,CAsCpCzB,CAAI,CAAGiC,CAAK,CAACjC,IAAN,EAtC6B,CAuCxCmB,CAAQ,CAAGnB,CAAI,CAACkC,KAAL,CAAW,IAAX,EAAiBV,MAA5B,CAEA,GAAIlD,CAAAA,CAAQ,CAAGF,CAAC,CAAC,aAAD,CAAhB,CACAE,CAAQ,CAAC6D,GAAT,CAAa,CACTC,KAAK,CAAE,MADE,CAETC,MAAM,CAAE,KAFC,CAGT,cAAe,KAHN,CAAb,EAMAJ,CAAK,CAACtD,KAAN,CAAYL,CAAZ,EAEA,GAAIgE,CAAAA,CAAS,CAAG,CACZC,WAAW,CAAE,MADD,CAEZC,IAAI,CA1DD,iBAwDS,CAGZC,QAAQ,CAAEtB,CAHE,CAIZuB,QAAQ,CAAElE,CAAY,CAAC,WAAD,CAJV,CAKZ8C,eAAe,CAAEA,CALL,CAMZqB,UAAU,CAAErB,CANA,CAOZsB,mBAAmB,CAAEtB,CAPT,CAAhB,CASA,GAAIA,CAAJ,CAAqB,CACjBgB,CAAS,gBAAT,CAA+B9D,CAAY,CAAC,mBAAD,CAC9C,CACD,GAAIqE,CAAAA,CAAM,CAAGjC,CAAG,CAACkC,IAAJ,CAASxE,CAAQ,CAACyE,GAAT,CAAa,CAAb,CAAT,CAA0BT,CAA1B,CAAb,CACA,GAAiC,IAA7B,GAAA9D,CAAY,SAAhB,CAAuC,CACnCqE,CAAM,CAACG,WAAP,IACH,CACDH,CAAM,CAACI,eAAP,KAEA,GAAIC,CAAAA,CAAO,CAAGL,CAAM,CAACM,UAAP,EAAd,CACAD,CAAO,CAACE,QAAR,CAAiBpD,CAAjB,EAEA3B,CAAK,CAACC,CAAD,CAAW4E,CAAX,CAAoB1E,CAApB,CAAL,CACAiD,CAAG,CAAC4B,YAAJ,CAAiB,sBAAjB,CAAyC,EAAzC,EACApB,CAAK,CAACqB,IAAN,EAEH,CACJ,CAED,MAAO,CACHC,IAAI,CAAE,cAASzC,CAAT,CAAiB,CACnB,GAAI0C,MAAM,CAAC5C,GAAX,CAAgB,CACZD,CAAmB,CAAC6C,MAAM,CAAC5C,GAAR,CAAa6C,QAAb,CAAuB3C,CAAvB,CACtB,CACJ,CALE,CAOV,CAjJK,CAAN","sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for implementing the highlight_code functionality of the\n * ace_line filter (q.v.)\n *\n * @module filter_ace_inline/highlight_code\n * @copyright  Richard Lobb, 2021, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['jquery'], function($) {\n    /**\n     * Add a UI div containing a Try it! button and a text area to display the\n     * results of a button click.\n     * @param {html_element} editNode The Ace edit node after which the div should be inserted.\n     * @param {object} aceSession The Ace editor session.\n     * @param {int} uiParameters The various parameters (mostly attributes of the pre element).\n     * Keys are button-name, output-lines, lang, stdin, files, params.\n     */\n    function addUi(editNode, aceSession, uiParameters) {\n        var button = $(\"<div><button type='button' class='btn btn-secondary' \" +\n                \"style='margin-bottom:6px;padding:2px 8px;'>\" +\n                uiParameters['button-name'] + \"</button></div>\");\n        var outputTextarea = $(\"<textarea readonly rows='\" +\n                uiParameters['output-lines'] +\n                \"' style='font-family:monospace; font-size:12px;width:100%'></textarea>\");\n        editNode.after(button);\n        button.after(outputTextarea);\n        M.util.js_pending('core/ajax');\n        require(['core/ajax'], function(ajax) {\n            button.on('click', function() {\n                ajax.call([{\n                    methodname: 'qtype_coderunner_run_in_sandbox',\n                    args: {\n                        sourcecode: aceSession.getValue(),\n                        language: uiParameters['lang'],\n                        stdin: uiParameters['stdin'],\n                        files: uiParameters['files'],\n                        params: uiParameters['params']\n                    },\n                    done: function(responseJson) {\n                        var response = JSON.parse(responseJson);\n                        var text = response.cmpinfo + response.output + response.stderr;\n                        outputTextarea.val(text);\n                    },\n                    fail: function(error) {\n                        alert(\"System error: please report: \" + error.message + ' ' + error.debuginfo);\n                    }\n                }]);\n            });\n            M.util.js_complete('core/ajax');\n        });\n    }\n\n    /**\n     * Replace all <pre> elements in the document rooted at root that have\n     * class ace-interactive-code with an Ace editor windows that display the\n     * code in whatever language has been set. Also provide a Try it! button\n     * that runs the code.\n     * @param {object} ace The Ace editor code.\n     * @param {object} root The root of the HTML document to modify.\n     * @param {object} config the config parameters from the admin settings panel.\n     */\n    function applyAceInteractive(ace, root, config) {\n        var mode = \"ace/mode/python\"; // Default is Python.\n        let codeElements = root.getElementsByClassName('ace-interactive-code');\n\n        var text, attrName, attr, numLines, value, dataName;\n        var showLineNumbers;\n\n        for (var i=0; i < codeElements.length; i++) {\n            let uiParameters = {\n                'lang': 'python3',\n                'font-size': '11pt',\n                'output-lines': 1,\n                'start-line-number': 1,\n                'button-name': config['button_label'],\n                'readonly': null,\n                'stdin': '',\n                'files': '',\n                'params': ''\n            };\n            let pre = codeElements[i];\n            if (pre.nodeName !== 'PRE' || pre.hasAttribute('data-processing-done') ||\n                    !pre.closest(\"div[id^='question']\")) {\n                continue;\n            }\n\n            for (attrName in uiParameters) {\n                attr = pre.attributes.getNamedItem(attrName);\n                if (attr) {\n                    dataName = attrName;\n                } else {  // Try data- as a prefix if 'raw' access fails.\n                    dataName = 'data-' + attrName;\n                    attr = pre.attributes.getNamedItem(dataName);\n                }\n                if (attr) {\n                    value = attr.value;\n                    if (attrName === 'start-line-number' && value.toLowerCase() === 'none') {\n                        value = null;\n                    } else if (attrName === 'start-line-number' || attrName === 'output-lines') {\n                        value = parseInt(value);\n                    }\n                    uiParameters[attrName] = value;\n                }\n            }\n            showLineNumbers = uiParameters['start-line-number'] ? true : false;\n            let jqpre = $(pre);\n            var text = jqpre.text();\n            numLines = text.split(\"\\n\").length;\n\n            let editNode = $(\"<div></div>\"); // Ace editor manages this\n            editNode.css({\n                width: \"100%\",\n                margin: \"6px\",\n                \"line-height\": \"1.3\"\n            });\n\n            jqpre.after(editNode);    // Insert the edit node\n\n            let aceConfig = {\n                newLineMode: \"unix\",\n                mode: mode,\n                maxLines: numLines,\n                fontSize: uiParameters['font-size'],\n                showLineNumbers: showLineNumbers,\n                showGutter: showLineNumbers,\n                highlightActiveLine: showLineNumbers\n            };\n            if (showLineNumbers) {\n                aceConfig['firstLineNumber'] = uiParameters['start-line-number'];\n            }\n            let editor = ace.edit(editNode.get(0), aceConfig);\n            if (uiParameters['readonly'] !== null) {\n                editor.setReadOnly(true);\n            }\n            editor.$blockScrolling = Infinity;\n\n            let session = editor.getSession();\n            session.setValue(text);\n            // Add a button and text area for output.\n            addUi(editNode, session, uiParameters);\n            pre.setAttribute('data-processing-done', '');\n            jqpre.hide();\n\n        }\n    }\n\n    return {\n        init: function(config) {\n            if (window.ace) {\n                applyAceInteractive(window.ace, document, config);\n            }\n        }\n    };\n});"],"file":"interactive_code.min.js"}