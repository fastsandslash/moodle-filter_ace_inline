{"version":3,"file":"ace_inline_code.min.js","sources":["../src/ace_inline_code.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for implementing both the ace_highlight_code and ace_interactive_code\n * functionality of the ace_line filter (q.v.)\n *\n * @module filter_ace_inline/highlight_code\n * @copyright  Richard Lobb, 2021, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['jquery'], function($) {\n    const RESULT_SUCCESS = 15;  // Code for a correct Jobe run.\n    const ACE_DARK_THEME = 'ace/theme/tomorrow_night';\n    const ACE_LIGHT_THEME = 'ace/theme/textmate';\n    /**\n     * Escape text special HTML characters.\n     * @param {string} text\n     * @returns {string} text with various special chars replaced with equivalent\n     * html entities. Newlines are replaced with <br>.\n     */\n    function escapeHtml(text) {\n      var map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n      };\n\n      return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\n    }\n    /**\n     * Extract from the given DOM pre element its various attributes.\n     * @param {DOMElement} pre The <pre> element from the DOM.\n     * @param {object} defaultParams An object with the default UI parameters.\n     * @returns {object} The original defaultParams object with any attributes\n     * that exist with in the <pre> element replaced by the pre element\n     * attributes. As special cases if there is a start-line-number parameter\n     * with the value 'none', start-line-number is set to null.\n     */\n    function getUiParameters(pre, defaultParams) {\n        var attrName, attr, value, dataName;\n        var uiParameters = {};\n\n        for (attrName in defaultParams) {\n            attr = pre.attributes.getNamedItem(attrName);\n            if (attr) {\n                dataName = attrName;\n            } else {  // Try data- as a prefix if 'raw' access fails.\n                dataName = 'data-' + attrName;\n                attr = pre.attributes.getNamedItem(dataName);\n            }\n            if (attr) {\n                value = attr.value;\n                if (attrName === 'start-line-number') {\n                    value = value.toLowerCase() === 'none' ? null : parseInt(value);\n                }\n            } else {\n                value = defaultParams[attrName];\n            }\n            uiParameters[attrName] = value;\n        }\n        return uiParameters;\n    }\n\n    /**\n     * Get the specified language string using\n     * AJAX and plug it into the given textarea\n     * @param {string} langStringName The language string name.\n     * @param {DOMnode} textarea The textarea into which the error message\n     * should be plugged.\n     * @param {string} additionalText Extra text to follow the result code.\n     */\n    function setLangString(langStringName, textarea, additionalText) {\n        require(['core/str'], function(str) {\n            var promise = str.get_string(langStringName, 'filter_ace_inline');\n            $.when(promise).then(function(message) {\n                textarea.show();\n                textarea.html(escapeHtml(\"*** \" + message + \" ***\\n\" + additionalText));\n            });\n        });\n    }\n\n\n    /**\n     * Analyse the response for errors. There are two sorts of error: sandbox failures,\n     * for which the field response.error is non-zero meaning the run didn't take\n     * place at all and failures in the run\n     * itself, such as compile errors, timeouts, runtime errors etc. The\n     * various codes are documented in the CodeRunner file sandbox.php.\n     * Some error returns, notably compilation error and runtime error, are not\n     * treated as errors here, since the stdout + stderr should reveal what\n     * happened anyway. More obscure errors are lumped together as 'Unknown\n     * runtime error'.\n     * @param {object} response The response from the web-service sandbox request.\n     * @returns string The language string to use for an error message or '' if\n     * no error message.\n     */\n    function diagnose(response) {\n        // Table of error conditions.\n        // Each row is response.error, response.result, langstring\n        // response.result is ignored if response.error is non-zero.\n        // Any condition not in the table is deemed an \"Unknown runtime error\".\n        var ERROR_RESPONSES = [\n            [1, 0, 'error_access_denied'], // Sandbox AUTH_ERROR\n            [2, 0, 'error_unknown_language'], // Sandbox WRONG_LANG_ID\n            [3, 0, 'error_access_denied'], // Sandbox ACCESS_DENIED\n            [4, 0, 'error_submission_limit_reached'], // Sandbox SUBMISSION_LIMIT_EXCEEDED\n            [5, 0, 'error_sandbox_server_overload'], // Sandbox SERVER_OVERLOAD\n            [0, 11, ''], // RESULT_COMPILATION_ERROR\n            [0, 12, ''], // RESULT_RUNTIME_ERROR\n            [0, 13, 'error_timeout'], // RESULT TIME_LIMIT\n            [0, RESULT_SUCCESS, ''], // RESULT_SUCCESS\n            [0, 17, 'error_memory_limit'], // RESULT_MEMORY_LIMIT\n            [0, 21, 'error_sandbox_server_overload'], // RESULT_SERVER_OVERLOAD\n            [0, 30, 'error_excessive_output']  // RESULT OUTPUT_LIMIT\n        ];\n        for (var i=0; i < ERROR_RESPONSES.length; i++) {\n            var row = ERROR_RESPONSES[i];\n            if (row[0] == response.error && (response.error != 0 || response.result == row[1])) {\n                return row[2];\n            }\n        }\n        return 'error_unknown_runtime';\n    }\n\n    /**\n     * Concatenates the cmpinfo, stdout and stderr fields of the sandbox\n     * response, truncating both stdout and stderr to a given maximum length\n     * if necessary (in which case '... (truncated)' is appended.\n     * @param {object} response Sandbox response object\n     * @param {int} maxLen The maximum length of the trimmed stringlen.\n     */\n    function combinedOutput(response, maxLen) {\n        var limit = s => s.length <= maxLen ? s : s.substr(0, maxLen) + '... (truncated)';\n        return response.cmpinfo + limit(response.output) + limit(response.stderr);\n    }\n\n    /**\n     * Handle a click on the Try it! button.\n     * @param {object} ajax The core Moodle ajax module.\n     * @param {html_element} outputDisplayArea The HTML <p> element in which to display output.\n     * @param {object} aceSession The Ace editor session.\n     * @param {int} uiParameters The various parameters (mostly attributes of the pre element).\n     * Keys are button-name, lang, stdin, files, params, prefix, suffix, codemapper, html-output.\n     */\n    function handleButtonClick(ajax, outputDisplayArea, aceSession, uiParameters) {\n        var htmlOutput = uiParameters['html-output'] !== null;\n        var maxLen = uiParameters['max-output-length'];\n        outputDisplayArea.html('');\n        if (htmlOutput) {\n            outputDisplayArea.hide();\n        }\n        outputDisplayArea.next('div.filter-ace-inline-html').remove();\n\n        var code = aceSession.getValue();\n        var mapFunc = uiParameters['code-mapper'];\n        if (mapFunc) {\n            code = window[mapFunc](code);\n        }\n        code = uiParameters.prefix + code + uiParameters.suffix;\n        ajax.call([{\n            methodname: 'qtype_coderunner_run_in_sandbox',\n            args: {\n                contextid: M.cfg.contextid,\n                sourcecode: code,\n                language: uiParameters.lang,\n                stdin: uiParameters.stdin,\n                files: uiParameters.files,\n                params: uiParameters.params\n            },\n            done: function(responseJson) {\n                var response = JSON.parse(responseJson);\n                var error = diagnose(response);\n                if (error === '') {\n                    // If no errors or compilation error or runtime error\n                    if (!htmlOutput || response.result !== RESULT_SUCCESS) {\n                        // Either it's not HTML output or it is but we have compilation or runtime errors.\n                        var text = combinedOutput(response, maxLen);\n                        outputDisplayArea.show();\n                        outputDisplayArea.html(escapeHtml(text));\n                    } else { // Valid HTML output - just plug in the raw html to the DOM.\n                        // Repeat the deletion of previous output in case of multiple button clicks.\n                        outputDisplayArea.next('div.filter-ace-inline-html').remove();\n                        var html = $(\"<div class='filter-ace-inline-html '\" +\n                                \"style='background-color:#eff;padding:5px;'\" +\n                                response.output + \"</div>\");\n                        outputDisplayArea.after(html);\n                    }\n                } else {\n                    // If an error occurs, display the language string in the\n                    // outputDisplayArea plus additional info.\n                    var extra = response.error == 0 ? combinedOutput(response, maxLen) : '';\n                    if (error === 'error_unknown_runtime') {\n                        extra += response.error ? '(Sandbox error code ' + response.error + ')' :\n                                '(Run result: ' + response.result + ')';\n                    }\n                    setLangString(error, outputDisplayArea, extra);\n                }\n            },\n            fail: function(error) {\n                alert(error.message);\n            }\n        }]);\n    }\n\n    /**\n     * Add a UI div containing a Try it! button and a paragraph to display the\n     * results of a button click (hidden until button clicked).\n     * If uiParameters['html-output'] is non-null,\n     * the output paragraph is used only for error output, and the output of the run\n     * is inserted directly into the DOM after the (usually hidden) paragraph.\n     * @param {html_element} editNode The Ace edit node after which the div should be inserted.\n     * @param {object} aceSession The Ace editor session.\n     * @param {int} uiParameters The various parameters (mostly attributes of the pre element).\n     * Keys are button-name, lang, stdin, files, params, prefix, suffix, html-output.\n     */\n    function addUi(editNode, aceSession, uiParameters) {\n        var button = $(\"<button type='button' class='btn btn-secondary' \" +\n                \"style='margin-bottom:6px;padding:2px 8px;'>\" +\n                uiParameters['button-name'] + \"</button>\");\n        var buttonDiv = $(\"<div></div>\");\n        var outputDisplayArea = $(\"<pre style='width:100%;white-space:pre-wrap;background-color:#eff;\" +\n                \"border:1px gray;padding:5px;overflow-wrap:break-word;max-height:600px;overflow:auto;'></pre>\");\n        buttonDiv.append(button);\n        editNode.after(buttonDiv);\n        buttonDiv.after(outputDisplayArea);\n        outputDisplayArea.hide();\n        M.util.js_pending('core/ajax');\n        require(['core/ajax'], function(ajax) {\n            button.on('click', function() {\n                handleButtonClick(ajax, outputDisplayArea, aceSession, uiParameters);\n            });\n        });\n        M.util.js_complete('core/ajax');\n    }\n\n\n    /**\n     * Replace any PRE elements of class ace-highlight-code with a\n     * readonly Ace editor window.\n     * @param {DOMElement} root The root of the tree in which highlighting should\n     * be applied.\n     * @param {string} config The plugin configuration settings.\n     */\n    function applyAceHighlighting(root, config) {\n        var defaultParams = {\n            'lang': 'python3',\n            'ace-lang': '',\n            'font-size': '11pt',\n            'start-line-number': null,\n            'readonly': true,\n            'dark_theme_mode': config['dark_theme_mode']  // 0, 1, 2 for never, sometimes, always\n        };\n        applyAceAndBuildUi(root, false, defaultParams);\n    }\n\n    /**\n     * Replace any PRE elements of class ace-interactive-code with an\n     * Ace editor window and a Try it! button that allows the code to be run.\n     * @param {DOMElement} root The root of the tree in which the actions should\n     * be applied.\n     * @param {string} config The plugin configuration settings.\n     */\n    function applyAceInteractive(root, config) {\n        var defaultParams = {\n            'lang': 'python3',\n            'ace-lang': '',\n            'font-size': '11pt',\n            'start-line-number': 1,\n            'button-name': config['button_label'],\n            'readonly': null,\n            'stdin': '',\n            'files': '',\n            'prefix': '',\n            'suffix': '',\n            'params': '{\"cputime\": 5}',\n            'code-mapper': null,\n            'html-output': null,\n            'max-output-length': 30000,\n            'dark_theme_mode': config['dark_theme_mode']  // 0, 1, 2 for never, sometimes, always\n        };\n        applyAceAndBuildUi(root, true, defaultParams);\n    }\n\n    /**\n     * Return the length of the given line when rendered by the given Ace editor.\n     * @param {Ace-renderer} renderer The Ace renderer.\n     * @param {String} line The line whose length is being checked.\n     * @return {int} The length of the rendered line in pixels.\n     */\n    function lineLength(renderer, line) {\n      var chars = renderer.session.$getStringScreenWidth(line)[0];\n\n      var width = Math.max(chars, 2) * renderer.characterWidth // text size\n        + 2 * renderer.$padding // padding\n        + 2  // little extra for the cursor\n        + 0; // add border width if needed\n\n      return width;\n    }\n\n    /**\n     * Return the longest of an array of strings.\n     * @param {array} lines An array of lines\n     * @return {String} The longest of the lines\n     */\n    function longest(lines) {\n        var longest = '';\n        for (var i = 0; i < lines.length; i++) {\n            if (lines[i].length > longest.length) {\n                longest = lines[i];\n            }\n        }\n        return longest;\n    }\n    /**\n     * Replace the given PRE element with an element managed by the Ace editor.\n     * @param {type} pre The PRE element to be be replaced by an Ace editor.\n     * @param {bool} isInteractive True for ace-interactive otherwise false.\n     * @param {type} theme Ace theme to use\n     * @param {type} uiParameters the User Interface parameters for the element.\n     */\n    function applyToPre(pre, isInteractive, theme, uiParameters) {\n        var MAX_WINDOW_LINES = 50;\n        var aceModeMap = {  // Ace modes for various languages (default: use language name).\n            'c': 'c_cpp',\n            'cpp': 'c_cpp',\n            'js': 'javascript',\n            'nodejs': 'javascript',\n            'c#': 'cs',\n            'octave': 'matlab',\n            'c++': 'c_cpp',\n            'python2': 'python',\n            'python3': 'python'\n        };\n        var showLineNumbers = uiParameters['start-line-number'] ? true : false;\n        var aceLang = uiParameters['ace-lang'] ? uiParameters['ace-lang'] : uiParameters['lang'];\n        aceLang = aceLang.toLowerCase();\n        if (aceLang in aceModeMap) {\n            aceLang = aceModeMap[aceLang];\n        }\n        var mode = 'ace/mode/' + aceLang;\n        var jqpre = $(pre);\n        var text = jqpre.text();\n        var lines = text.split(\"\\n\");\n        var numLines = lines.length;\n        var longestLine = longest(lines);\n\n        var editNode = $(\"<div></div>\"); // Ace editor manages this\n        var width = pre.scrollWidth;  // Our first guess at a minimum width.\n        var css = {\n            \"margin\": \"6px 0px 6px 0px\", // Top, right, bottom, left\n            \"line-height\": \"1.3\",\n            \"min-width\": width + \"px\"\n        };\n        editNode.css(css);\n        jqpre.after(editNode);    // Insert the edit node\n\n        var aceConfig = {\n            newLineMode: \"unix\",\n            mode: mode,\n            minLines: numLines,\n            maxLines: MAX_WINDOW_LINES,\n            fontSize: uiParameters['font-size'],\n            showLineNumbers: showLineNumbers,\n            firstLineNumber: uiParameters['start-line-number'],\n            showGutter: showLineNumbers,\n            showPrintMargin: false,\n            autoScrollEditorIntoView: true,\n            highlightActiveLine: showLineNumbers\n        };\n\n        var editor = window.ace.edit(editNode.get(0), aceConfig);\n        var session = editor.getSession();\n        var aceWidestLine = lineLength(editor.renderer, longestLine);\n        if (aceWidestLine > width) {\n            editNode.css({'min-width': Math.ceil(aceWidestLine) + \"px\"});\n        }\n        session.setValue(text);\n        editor.setTheme(theme);\n        if (uiParameters.readonly !== null) {\n            editor.setReadOnly(true);\n        }\n\n        // Add a button and text area for output if ace-interactive-code.\n        if (isInteractive) {\n            addUi(editNode, session, uiParameters);\n        } else {\n            editor.renderer.$cursorLayer.element.style.display = \"none\"; // Hide cursor.\n        }\n        jqpre.hide();  // NB this sets display = 'none', checked above.\n\n        // After rendering, update the container min-width if the rendered\n        // length of the longest lines exceeds the preset min-width.\n\n    }\n\n    /**\n     * Replace all <pre> elements in the document rooted at root that have\n     * the given className with an Ace editor windows that display the\n     * code in whatever language has been set.\n     * @param {object} root The root of the HTML document to modify.\n     * @param {bool} isInteractive True for ace-interactive otherwise false.\n     * @param {object} defaultParams An object defining the allowed pre attributes\n     * that control the state of the Ace editor and the (optional) UI.\n     */\n    function applyAceAndBuildUi(root, isInteractive, defaultParams) {\n        var className = isInteractive ? 'ace-interactive-code' : 'ace-highlight-code';\n        var codeElements = root.getElementsByClassName(className);\n        var darkMode = defaultParams['dark_theme_mode']; // 0, 1, 2 for never, sometimes, always\n        var theme = null;\n\n        // Use light or dark theme according to user's prefers-color-scheme.\n        // Default to light.\n        if (darkMode == 2 || (darkMode == 1 && window.matchMedia &&\n                window.matchMedia(\"(prefers-color-scheme: dark)\").matches)) {\n            theme = ACE_DARK_THEME;\n        } else {\n            theme = ACE_LIGHT_THEME;\n        }\n\n        for (let i=0; i < codeElements.length; i++) {\n            let pre = codeElements[i];\n            let uiParameters = getUiParameters(pre, defaultParams);\n            if (pre.nodeName === 'PRE' && pre.style.display !== 'none') {\n                applyToPre(pre, isInteractive, theme, uiParameters);\n            }\n        }\n    }\n\n    return {\n        initAceInteractive: async function(config) {\n            if (!window.ace_inline_code_interactive_done) { // Do it once only.\n                window.ace_inline_code_interactive_done = true;\n                while (!window.ace) {\n                    await new Promise(resolve => setTimeout(resolve, 1000));\n                }\n                applyAceInteractive(document, config);\n                // Add a hook for use by dynamically generated content.\n                window.applyAceInteractive = function () {\n                    applyAceInteractive(document, config);\n                };\n            }\n        },\n        initAceHighlighting: async function(config) {\n            if (!window.ace_inline_code_highlighting_done) { // Do it once only.\n                window.ace_inline_code_highlighting_done = true;\n                while (!window.ace) {\n                    await new Promise(resolve => setTimeout(resolve, 1000));\n                }\n                applyAceHighlighting(document, config);\n                // Add a hook for use by dynamically generated content.\n                window.applyAceHighlighting = function () {\n                    applyAceHighlighting(document, config);\n                };\n            }\n        }\n    };\n});"],"names":["define","$","escapeHtml","text","map","replace","m","getUiParameters","pre","defaultParams","attrName","attr","value","dataName","uiParameters","attributes","getNamedItem","toLowerCase","parseInt","combinedOutput","response","maxLen","limit","s","length","substr","cmpinfo","output","stderr","handleButtonClick","ajax","outputDisplayArea","aceSession","htmlOutput","html","hide","next","remove","code","getValue","mapFunc","window","prefix","suffix","call","methodname","args","contextid","M","cfg","sourcecode","language","lang","stdin","files","params","done","responseJson","langStringName","textarea","additionalText","JSON","parse","error","ERROR_RESPONSES","i","row","result","diagnose","after","show","extra","require","str","promise","get_string","when","then","message","fail","alert","applyAceHighlighting","root","config","applyAceAndBuildUi","applyAceInteractive","applyToPre","isInteractive","theme","aceModeMap","showLineNumbers","aceLang","mode","jqpre","lines","split","numLines","longestLine","longest","editNode","width","scrollWidth","css","renderer","line","chars","aceConfig","newLineMode","minLines","maxLines","fontSize","firstLineNumber","showGutter","showPrintMargin","autoScrollEditorIntoView","highlightActiveLine","editor","ace","edit","get","session","getSession","aceWidestLine","$getStringScreenWidth","Math","max","characterWidth","$padding","ceil","setValue","setTheme","readonly","setReadOnly","button","buttonDiv","append","util","js_pending","on","js_complete","addUi","$cursorLayer","element","style","display","className","codeElements","getElementsByClassName","darkMode","matchMedia","matches","nodeName","initAceInteractive","async","ace_inline_code_interactive_done","Promise","resolve","setTimeout","document","initAceHighlighting","ace_inline_code_highlighting_done"],"mappings":"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"}