{"version":3,"sources":["../src/ace_inline_code.js"],"names":["define","$","getUiParameters","pre","defaultParams","attrName","attr","value","dataName","uiParameters","attributes","getNamedItem","toLowerCase","parseInt","setLangString","langStringName","textarea","require","str","promise","get_string","when","then","message","val","setErrorMessage","resultCode","addUi","editNode","aceSession","button","outputTextarea","after","M","util","js_pending","ajax","on","call","methodname","args","sourcecode","getValue","language","stdin","files","params","done","responseJson","response","JSON","parse","result","text","cmpinfo","output","stderr","fail","error","alert","debuginfo","js_complete","applyAceHighlighting","ace","root","applyAceAndBuildUi","applyAceInteractive","config","className","numLines","showLineNumbers","css","width","margin","codeElements","getElementsByClassName","i","length","nodeName","hasAttribute","closest","jqpre","split","aceConfig","newLineMode","mode","maxLines","fontSize","showGutter","highlightActiveLine","editor","edit","get","setReadOnly","session","getSession","setValue","setAttribute","hide","initAceInteractive","window","document","initAceHighlighting"],"mappings":"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","sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for implementing the highlight_code functionality of the\n * ace_line filter (q.v.)\n *\n * @module filter_ace_inline/highlight_code\n * @copyright  Richard Lobb, 2021, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['jquery'], function($) {\n    /**\n     * Extract from the given DOM pre element its various attributes.\n     * @param {DOMElement} pre The <pre> element from the DOM.\n     * @param {object} defaultParams An object with the default UI parameters.\n     * @returns {object} The original defaultParams object with any attributes\n     * that exist with in the <pre> element replaced by the pre element\n     * attributes. As special cases if there is a start-line-number parameter\n     * with the value 'none', start-line-number is set to null and if there is\n     * a readonly attribute with any value, readonly is set to true.\n     */\n    function getUiParameters(pre, defaultParams) {\n        var attrName, attr, value, dataName;\n        var uiParameters = {};\n\n        for (attrName in defaultParams) {\n            attr = pre.attributes.getNamedItem(attrName);\n            if (attr) {\n                dataName = attrName;\n            } else {  // Try data- as a prefix if 'raw' access fails.\n                dataName = 'data-' + attrName;\n                attr = pre.attributes.getNamedItem(dataName);\n            }\n            if (attr) {\n                value = attr.value;\n                if (attrName === 'start-line-number' && value.toLowerCase() === 'none') {\n                    value = null;\n                } else if (attrName === 'start-line-number' || attrName === 'output-lines') {\n                    value = parseInt(value);\n                }\n            } else {\n                value = defaultParams[attrName];\n            }\n            uiParameters[attrName] = value;\n        }\n        if (uiParameters['readonly'] !== false) {\n            uiParameters['readonly'] = true; // If this attribute exists in the pre, it's true.\n        }\n        return uiParameters;\n    }\n\n    /**\n     * Get the specified language string using\n     * AJAX and plug it into the given textarea\n     * @param {string} langStringName The language string name.\n     * @param {DOMnode} textarea The textarea into which the error message\n     * should be plugged.\n     */\n    function setLangString(langStringName, textarea) {\n        require(['core/str'], function(str) {\n            var promise = str.get_string(langStringName, 'filter_ace_inline');\n            $.when(promise).then(function(message) {\n                textarea.val(\"*** \" + message + \" ***\");\n            });\n        });\n    }\n\n    /**\n     * Get the appropriate language string error message for the given resultCode using\n     * AJAX and plug it into the given textarea.\n     * @param {int} resultCode The 'result' field of the Jobe return value.\n     * @param {DOMnode} textarea The textarea into which the error message\n     * should be plugged.\n     */\n    function setErrorMessage(resultCode, textarea) {\n        if (resultCode == 11) {\n            setLangString('result_compilation_error', textarea);\n        } else if (resultCode == 12) {\n            setLangString('result_runtime_error', textarea);\n        } else if (resultCode == 13) {\n            setLangString('result_time_limit', textarea);\n        } else if (resultCode == 17) {\n            setLangString('result_memory_limit', textarea);\n        } else if (resultCode == 21) {\n            setLangString('result_server_overload', textarea);\n        } else {\n            setLangString('result_unknown_error', textarea);\n        }\n    }\n    /**\n     * Add a UI div containing a Try it! button and a text area to display the\n     * results of a button click.\n     * @param {html_element} editNode The Ace edit node after which the div should be inserted.\n     * @param {object} aceSession The Ace editor session.\n     * @param {int} uiParameters The various parameters (mostly attributes of the pre element).\n     * Keys are button-name, output-lines, lang, stdin, files, params.\n     */\n    function addUi(editNode, aceSession, uiParameters) {\n        var button = $(\"<div><button type='button' class='btn btn-secondary' \" +\n                \"style='margin-bottom:6px;padding:2px 8px;'>\" +\n                uiParameters['button-name'] + \"</button></div>\");\n        var outputTextarea = $(\"<textarea readonly rows='\" +\n                uiParameters['output-lines'] +\n                \"' style='font-family:monospace; font-size:12px;width:100%'></textarea>\");\n        editNode.after(button);\n        button.after(outputTextarea);\n        M.util.js_pending('core/ajax');\n        require(['core/ajax'], function(ajax) {\n            button.on('click', function() {\n                ajax.call([{\n                    methodname: 'qtype_coderunner_run_in_sandbox',\n                    args: {\n                        sourcecode: aceSession.getValue(),\n                        language: uiParameters['lang'],\n                        stdin: uiParameters['stdin'],\n                        files: uiParameters['files'],\n                        params: uiParameters['params']\n                    },\n                    done: function(responseJson) {\n                        var response = JSON.parse(responseJson);\n                        if (response.result === 15) { // Is it RESULT_SUCCESS?\n                            var text = response.cmpinfo + response.output + response.stderr;\n                            outputTextarea.val(text);\n                        } else { // Oops. Plug in an error message instead.\n                            setErrorMessage(response.result, outputTextarea);\n                        }\n                    },\n                    fail: function(error) {\n                        alert(\"System error: please report: \" + error.message + ' ' + error.debuginfo);\n                    }\n                }]);\n            });\n            M.util.js_complete('core/ajax');\n        });\n    }\n\n    /**\n     * Replace any PRE elements of class ace-highlight-code with a\n     * readonly Ace editor window.\n     * @param {object} ace The JavaScript Ace editor object.\n     * @param {DOMElement} root The root of the tree in which highlighting should\n     * be applied.\n     */\n    function applyAceHighlighting(ace, root) {\n        var defaultParams = {\n            'isInteractive': false,\n            'lang': 'python3',\n            'font-size': '11pt',\n            'start-line-number': null,\n            'readonly': true\n        };\n        applyAceAndBuildUi(ace, root, 'ace-highlight-code', defaultParams);\n    }\n\n    /**\n     * Replace any PRE elements of class ace-interactive-code with an\n     * Ace editor window and a Try it! button that allows the code to be run.\n     * @param {object} ace The JavaScript Ace editor object.\n     * @param {DOMElement} root The root of the tree in which the actions should\n     * be applied.\n     * @param {object} config The plugin configuration (settings).\n     */\n    function applyAceInteractive(ace, root, config) {\n        var defaultParams = {\n            'isInteractive': true,\n            'lang': 'python3',\n            'font-size': '11pt',\n            'output-lines': 1,\n            'start-line-number': 1,\n            'button-name': config['button_label'],\n            'readonly': false,\n            'stdin': '',\n            'files': '',\n            'params': '{\"cputime\": 1}'\n        };\n        applyAceAndBuildUi(ace, root, 'ace-interactive-code', defaultParams);\n    }\n\n    /**\n     * Replace all <pre> elements in the document rooted at root that have\n     * the given className with an Ace editor windows that display the\n     * code in whatever language has been set. Also, if the given defaultParams\n     * object has a true attribute isInteractive, provide a Try it! button\n     * that runs the code.\n     * @param {object} ace The Ace editor code.\n     * @param {object} root The root of the HTML document to modify.\n     * @param {string} className The className that any target PRE must have.\n     * @param {object} defaultParams An object defining the allowed pre attributes\n     * that control the state of the Ace editor and the (optional) UI.\n     */\n    function applyAceAndBuildUi(ace, root, className, defaultParams) {\n        var text, numLines;\n        var showLineNumbers;\n        var css = {\n            width: \"100%\",\n            margin: \"6px\",\n            \"line-height\": \"1.3\"\n        };\n        var mode = \"ace/mode/python\"; // Default is Python.\n        var codeElements = root.getElementsByClassName(className);\n\n        for (var i=0; i < codeElements.length; i++) {\n            var pre = codeElements[i];\n            if (pre.nodeName !== 'PRE' || pre.hasAttribute('data-processing-done') ||\n                    !pre.closest(\"div[id^='question']\")) {\n                continue;\n            }\n            let uiParameters = getUiParameters(pre, defaultParams);\n            showLineNumbers = uiParameters['start-line-number'] ? true : false;\n            let jqpre = $(pre);\n            var text = jqpre.text();\n            numLines = text.split(\"\\n\").length;\n\n            let editNode = $(\"<div></div>\"); // Ace editor manages this\n            editNode.css(css);\n\n            jqpre.after(editNode);    // Insert the edit node\n\n            let aceConfig = {\n                newLineMode: \"unix\",\n                mode: mode,\n                maxLines: numLines,\n                fontSize: uiParameters['font-size'],\n                showLineNumbers: showLineNumbers,\n                showGutter: showLineNumbers,\n                highlightActiveLine: showLineNumbers\n            };\n            if (showLineNumbers) {\n                aceConfig['firstLineNumber'] = uiParameters['start-line-number'];\n            }\n            let editor = ace.edit(editNode.get(0), aceConfig);\n            if (uiParameters['readonly']) {\n                editor.setReadOnly(true);\n            }\n\n            let session = editor.getSession();\n            session.setValue(text);\n            // Add a button and text area for output.\n            if (uiParameters['isInteractive']) {\n                addUi(editNode, session, uiParameters);\n            }\n            pre.setAttribute('data-processing-done', '');\n            jqpre.hide();\n\n        }\n    }\n\n    return {\n        initAceInteractive: function(config) {\n            if (window.ace) {\n                applyAceInteractive(window.ace, document, config);\n            }\n        },\n        initAceHighlighting: function() {\n            if (window.ace) {\n                applyAceHighlighting(window.ace, document);\n            }\n        }\n    };\n});"],"file":"ace_inline_code.min.js"}