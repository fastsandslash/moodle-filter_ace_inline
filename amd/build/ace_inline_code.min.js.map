{"version":3,"file":"ace_inline_code.min.js","sources":["../src/ace_inline_code.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for implementing both the ace_highlight_code and ace_interactive_code\n * functionality of the ace_line filter (q.v.)\n *\n * @module filter_ace_inline/highlight_code\n * @copyright  Richard Lobb, 2021, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/*jshint esversion: 8 */\n\ndefine(['jquery'], function($) {\n    const RESULT_SUCCESS = 15;  // Code for a correct Jobe run.\n    const ACE_DARK_THEME = 'ace/theme/tomorrow_night';\n    const ACE_LIGHT_THEME = 'ace/theme/textmate';\n    const MIN_WINDOW_LINES = 1;\n    const MAX_WINDOW_LINES = 50;\n    const MAX_OUTPUT_LENGTH = 30000;\n\n    let uploadFiles = {};\n    /**\n     * Escape text special HTML characters.\n     * @param {string} text\n     * @returns {string} text with various special chars replaced with equivalent\n     * html entities. Newlines are replaced with <br>.\n     */\n    function escapeHtml(text) {\n      const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n      };\n\n      return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\n    }\n    /**\n     * Extract from the given DOM pre element its various attributes.\n     * @param {DOMElement} pre The <pre> element from the DOM.\n     * @param {object} defaultParams An object with the default UI parameters.\n     * @returns {object} The original defaultParams object with any attributes\n     * that exist with in the <pre> element replaced by the pre element\n     * attributes. As special cases if there is a start-line-number parameter\n     * with the value 'none', start-line-number is set to null.\n     */\n    function getUiParameters(pre, defaultParams) {\n        let uiParameters = {};\n\n        for (const attrName in defaultParams) {\n            if (defaultParams.hasOwnProperty(attrName)) { // Redundant but shuts up jshint\n                let value = '', dataName = '';\n                let attr = pre.attributes.getNamedItem(attrName);\n                if (attr) {\n                    dataName = attrName;\n                } else {  // Try data- as a prefix if 'raw' access fails.\n                    dataName = 'data-' + attrName;\n                    attr = pre.attributes.getNamedItem(dataName);\n                }\n                if (attr) {\n                    value = attr.value;\n                    if (attrName === 'start-line-number') {\n                        value = value.toLowerCase() === 'none' ? null : parseInt(value);\n                    } else if (attrName === 'min-lines' || attrName === 'max-lines') {\n                        value = parseInt(value);\n                    } else if (attrName === 'hidden') {\n                        value = true; // If the 'hidden' attribute exists, it's True!\n                    }\n                } else {\n                    value = defaultParams[attrName];\n                }\n                uiParameters[attrName] = value;\n            }\n        }\n        return uiParameters;\n    }\n\n    /**\n     * Set the specified language string using\n     * AJAX and put it into the outputTextArea\n     * @param {string} langStringName The language string name.\n     * should be plugged.\n     * @param {string} additionalText Extra text to follow the result code.\n     * @param {object} outputTextArea Pre-formatted area to put text.\n     * @returns string The text to be outputed in a box.\n     */\n    function setLangString(langStringName, additionalText, outputTextArea) {\n        require(['core/str'], function(str) {\n            const promise = str.get_string(langStringName, 'filter_ace_inline');\n            $.when(promise).done(function(message) {\n                outputTextArea.html(escapeHtml(\"*** \" + message + \" ***\\n\" + additionalText));\n            });\n        });\n    }\n\n\n    /**\n     * Analyse the response for errors. There are two sorts of error: sandbox failures,\n     * for which the field response.error is non-zero meaning the run didn't take\n     * place at all and failures in the run\n     * itself, such as compile errors, timeouts, runtime errors etc. The\n     * various codes are documented in the CodeRunner file sandbox.php.\n     * Some error returns, notably compilation error and runtime error, are not\n     * treated as errors here, since the stdout + stderr should reveal what\n     * happened anyway. More obscure errors are lumped together as 'Unknown\n     * runtime error'.\n     * @param {object} response The response from the web-service sandbox request.\n     * @returns string The language string to use for an error message or '' if\n     * no error message.\n     */\n    function diagnose(response) {\n        // Table of error conditions.\n        // Each row is response.error, response.result, langstring\n        // response.result is ignored if response.error is non-zero.\n        // Any condition not in the table is deemed an \"Unknown runtime error\".\n        const ERROR_RESPONSES = [\n            [1, 0, 'error_access_denied'], // Sandbox AUTH_ERROR\n            [2, 0, 'error_unknown_language'], // Sandbox WRONG_LANG_ID\n            [3, 0, 'error_access_denied'], // Sandbox ACCESS_DENIED\n            [4, 0, 'error_submission_limit_reached'], // Sandbox SUBMISSION_LIMIT_EXCEEDED\n            [5, 0, 'error_sandbox_server_overload'], // Sandbox SERVER_OVERLOAD\n            [0, 11, ''], // RESULT_COMPILATION_ERROR\n            [0, 12, ''], // RESULT_RUNTIME_ERROR\n            [0, 13, 'error_timeout'], // RESULT TIME_LIMIT\n            [0, RESULT_SUCCESS, ''], // RESULT_SUCCESS\n            [0, 17, 'error_memory_limit'], // RESULT_MEMORY_LIMIT\n            [0, 21, 'error_sandbox_server_overload'], // RESULT_SERVER_OVERLOAD\n            [0, 30, 'error_excessive_output']  // RESULT OUTPUT_LIMIT\n        ];\n        for (const row of ERROR_RESPONSES) {\n            if (row[0] == response.error && (response.error != 0 || response.result == row[1])) {\n                return row[2];\n            }\n        }\n        return 'error_unknown_runtime';\n    }\n\n    /**\n     * Concatenates the cmpinfo, stdout and stderr fields of the sandbox\n     * response, truncating both stdout and stderr to a given maximum length\n     * if necessary (in which case '... (truncated)' is appended.\n     * @param {object} response Sandbox response object\n     * @param {int} maxLen The maximum length of the trimmed stringlen.\n     */\n    function combinedOutput(response, maxLen) {\n        const limit = s => s.length <= maxLen ? s : s.substr(0, maxLen) + '... (truncated)';\n        return response.cmpinfo + limit(response.output) + limit(response.stderr);\n    }\n\n    /**\n     * Gets the uiParameter of 'stdin-taid' which should be the id of an element.\n     * @param {object} uiParameters The various parameters (mostly attributes of the pre element)\n     * @returns {string} The specified standard input or an empty string if no\n     * stdin specified or null if not valid.\n     */\n    function getStdin(uiParameters) {\n        const taid = uiParameters['stdin-taid'];\n        const stdin = uiParameters.stdin;\n        if (taid) {\n            let output = $('#' + taid).val();\n            // Handles invalid textarea names.\n            if (!output) {\n                return null;\n            } else {\n                return output;\n            }\n        } else if (stdin) {\n            return stdin;\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Gets the uiParameter 'file-taids' and parses it if it is JSON. Promises an\n     * arbitrary non-JSON object for error handling in the run_in_sandbox.php, else\n     * promises a JSON object of appropriate mappings\n     *\n     * @param {object} uiParameters The various parameters (mostly attributes of the pre element)\n     * @returns {string} An JSON-encoding of an object that defines one or more\n     * filename:filecontents mappings.\n     */\n    async function getFiles(uiParameters) {\n        let taids = uiParameters['file-taids'];\n        let map = {};\n\n        if (!$.isEmptyObject(taids)) {\n            // Catches JSON parse errors for file names.\n            try {\n                taids = JSON.parse(taids);\n            } catch (SyntaxError) {\n                return Promise.resolve('error');\n            }\n            for (const filename in taids) {\n                if (taids.hasOwnProperty(filename)) {\n                    const id = taids[filename];\n                    const value = $('#' + id).val();\n                    map[filename] = value;\n                }\n            }\n        }\n\n        // Merge in any explicitly uploaded files.\n        for (const name in uploadFiles) {\n            if (uploadFiles.hasOwnProperty(name)) {\n                map[name] = uploadFiles[name]; // Copy contents across.\n            }\n        }\n        return Promise.resolve(JSON.stringify(map));\n    }\n\n    /**\n     * Handle a click on the Try it! button; pre-checks the std-taids for valid ids.\n     * @param {html_element} outputDisplayArea The HTML <p> element in which to display output.\n     * @param {string} code The code to be run.\n     * @param {int} uiParameters The various parameters (mostly attributes of the pre element).\n     * Keys are button-name, lang, stdin, files, params, prefix, suffix, codemapper, html-output.\n     * @returns {string} code of the code to run, else null but executes errors if needed.\n     */\n    function handleButtonClick(outputDisplayArea, code, uiParameters) {\n        cleanOutput(outputDisplayArea);\n        outputDisplayArea.show();\n\n        const mapFunc = uiParameters['code-mapper'];\n        if (mapFunc) {\n            code = window[mapFunc](code);\n        }\n        code = uiParameters.prefix + code + uiParameters.suffix;\n        if (getStdin(uiParameters) !== null) {\n            return code;\n        } else {\n            outputDisplayArea.css({border: '1px solid red', backgroundColor: '#faa'});\n            const textArea = createTextNode();\n            setLangString('error_user_params', 'Id not found for element', textArea);\n            handleOutput('', outputDisplayArea, textArea);\n            return null;\n        }\n    }\n\n    /**\n     * Executes the code through CodeRunner run_in_sandbox.\n     * @param {object} ajax The core Moodle ajax module.\n     * @param {html_element} outputDisplayArea The HTML <p> element in which to display output.\n     * @param {string} code The code to be run.\n     * @param {int} uiParameters The various parameters (mostly attributes of the pre element).\n     * Keys are button-name, lang, stdin, files, params, prefix, suffix, codemapper, html-output.\n     */\n    async function executeCode(ajax, outputDisplayArea, code, uiParameters) {\n        const htmlOutput = uiParameters['html-output'] !== null;\n        const maxLen = uiParameters['max-output-length'];\n        const outputTextArea = createTextNode();\n        ajax.call([{\n            methodname: 'qtype_coderunner_run_in_sandbox',\n            args: {\n                contextid: M.cfg.contextid,\n                sourcecode: code,\n                language: uiParameters.lang,\n                stdin: getStdin(uiParameters),\n                files: await getFiles(uiParameters),\n                params: uiParameters.params\n            },\n            done: function(responseJson) {\n                cleanOutput(outputDisplayArea);\n                const response = JSON.parse(responseJson);\n                const error = diagnose(response);\n                if (error === '') {\n                    // If no errors or compilation error or runtime error.\n                    if (!htmlOutput || response.result !== RESULT_SUCCESS) {\n                        // Either it's not HTML output or it is but we have compilation or runtime errors.\n                        const text = combinedOutput(response, maxLen);\n                        // If there is an execution error, change the background colour.\n                        if (response.result !== RESULT_SUCCESS) {\n                            outputDisplayArea.css({backgroundColor: '#fcc'});\n                        }\n                        handleOutput(text, outputDisplayArea, outputTextArea);\n                    } else { // Valid HTML output - just plug in the raw html to the DOM.\n                        const html = $(\"<div class='filter-ace-inline-html '\" +\n                                \"style='background-color:#eff;padding:5px;'>\" +\n                                response.output + \"</div>\");\n                        outputDisplayArea.after(html);\n                    }\n                } else {\n                    // If an error occurs, display the language string in the\n                    // outputDisplayArea plus additional info, for non-sandbox errors.\n                    let extra = response.error == 0 ? combinedOutput(response, maxLen) : '';\n                    if (error === 'error_unknown_runtime') {\n                        extra += response.error ? '(Sandbox error code ' + response.error + ')' :\n                            '(Run result: ' + response.result + ')';\n                    }\n                    outputDisplayArea.css({backgroundColor: '#fcc'});\n                    handleOutput('', outputDisplayArea, outputTextArea);\n                    setLangString(error, extra, outputTextArea);\n                }\n            },\n            fail: function(error) {\n                cleanOutput(outputDisplayArea);\n                // Change the outputDisplayArea to something more ominious...\n                outputDisplayArea.css({border: '1px solid red', backgroundColor: '#faa'});\n                handleOutput('', outputDisplayArea, outputTextArea);\n                setLangString('error_user_params', error.message, outputTextArea);\n            }\n        }]);\n    }\n    /**\n     * Makes and returns a pre-node to contain the output text.\n     * @returns {object} The pre-node to make the text.\n     */\n    function createTextNode() {\n        // Create a pre-node to contain text.\n        const outputTextArea = $(\"<pre class='output-text-area'</pre>\");\n        outputTextArea.css({\n            overflowWrap: 'break-word',\n            whiteSpace: 'pre-wrap',\n            width: '100%',\n            overflow: 'auto',\n            maxHeight:'600px',\n            marginTop: '0px',\n            marginBottom: '0px'\n        });\n        return outputTextArea;\n    }\n    /**\n     * Handles and displays all output into the outputDisplayArea, by inserting the\n     * text into the outputTextArea, and then into the outputDisplayArea. Error\n     * output is inserted before this function.\n     * @param {type} text The text message to be displayed.\n     * @param {type} outputDisplayArea The outputDisplayArea for the output.\n     * @param {type} outputTextArea The outputTextArea for pre-formatted text.\n     */\n    function handleOutput(text, outputDisplayArea, outputTextArea) {\n        outputTextArea.html(escapeHtml(text));\n        outputDisplayArea.append(outputTextArea);\n    }\n    /**\n     * Cleans the outputDisplayArea and resets to normal.\n     * @param {type} outputDisplayArea Resets the output box.\n     */\n    function cleanOutput(outputDisplayArea) {\n        outputDisplayArea.html('');\n        outputDisplayArea.next('div.filter-ace-inline-html').remove();\n        outputDisplayArea.css({backgroundColor: '#eff'});\n    }\n    /**\n     * Add a UI div containing a Try it! button and a paragraph to display the\n     * results of a button click (hidden until button clicked).\n     * If uiParameters['html-output'] is non-null,\n     * the output paragraph is used only for error output, and the output of the run\n     * is inserted directly into the DOM after the (usually hidden) paragraph.\n     * @param {html_element} insertionPoint The HTML element after which the div should be inserted.\n     * @param {function} getCode A function that retrieves the code to be run.\n     * @param {int} uiParameters The various parameters (mostly attributes of the pre element).\n     * Keys are button-name, lang, stdin, files, params, prefix, suffix, html-output.\n     */\n    async function addUi(insertionPoint, getCode, uiParameters) {\n        const button = $(\"<button type='button' class='btn btn-secondary' /button>\" +\n                uiParameters['button-name'] + \"</button>\");\n        button.css({\n            marginBottom: '6px',\n            padding: '2px 8px'\n        });\n        const buttonDiv = $(\"<div></div>\");\n        const outputDisplayArea = $(\"<div class='output-display-area' /div>\");\n        outputDisplayArea.css({\n            backgroundColor: '#eff',\n            padding: '5px 10px 5px',\n            verticalAlign: 'middle'\n        });\n        buttonDiv.append(button);\n        $(insertionPoint).after(buttonDiv);\n        buttonDiv.after(outputDisplayArea);\n        outputDisplayArea.hide();\n        M.util.js_pending('core/ajax');\n        require(['core/ajax'], function(ajax) {\n            button.on('click', function() {\n                const code = handleButtonClick(outputDisplayArea, getCode(), uiParameters);\n                // UI parameters get checked first; and if no error, then runs through.\n                if (code !== null) {\n                    executeCode(ajax, outputDisplayArea, code, uiParameters);\n                }\n            });\n        });\n        M.util.js_complete('core/ajax');\n    }\n\n\n    /**\n     * Replace any PRE elements of class ace-highlight-code with a\n     * readonly Ace editor window.\n     * @param {DOMElement} root The root of the tree in which highlighting should\n     * be applied.\n     * @param {string} config The plugin configuration settings.\n     */\n    function applyAceHighlighting(root, config) {\n        const defaultParams = {\n            'lang': 'python3',\n            'ace-lang': '',\n            'font-size': '11pt',\n            'start-line-number': null,\n            'min-lines': MIN_WINDOW_LINES,\n            'max-lines': MAX_WINDOW_LINES,\n            'readonly': true,\n            'dark-theme-mode': config.dark_theme_mode  // 0, 1, 2 for never, sometimes, always\n        };\n        applyAceAndBuildUi(root, false, defaultParams);\n    }\n\n    /**\n     * Replace any PRE elements of class ace-interactive-code with an\n     * Ace editor window and a Try it! button that allows the code to be run.\n     * @param {DOMElement} root The root of the tree in which the actions should\n     * be applied.\n     * @param {string} config The plugin configuration settings.\n     */\n    function applyAceInteractive(root, config) {\n        const defaultParams = {\n            'lang': 'python3',\n            'ace-lang': '',\n            'font-size': '11pt',\n            'hidden': false,\n            'start-line-number': 1,\n            'button-name': config.button_label,\n            'readonly': null,\n            'stdin': '',\n            'stdin-taid': '',\n            'file-taids': {},\n            'file-upload-id': null,\n            'prefix': '',\n            'suffix': '',\n            'params': '{\"cputime\": 5}',\n            'code-mapper': null,\n            'html-output': null,\n            'min-lines': MIN_WINDOW_LINES,\n            'max-lines': MAX_WINDOW_LINES,\n            'max-output-length': MAX_OUTPUT_LENGTH,\n            'dark-theme-mode': config.dark_theme_mode  // 0, 1, 2 for never, sometimes, always\n        };\n        applyAceAndBuildUi(root, true, defaultParams);\n    }\n\n    /**\n     * Return the length of the given line when rendered by the given Ace editor.\n     * @param {Ace-renderer} renderer The Ace renderer.\n     * @param {String} line The line whose length is being checked.\n     * @return {int} The length of the rendered line in pixels.\n     */\n    function lineLength(renderer, line) {\n      const chars = renderer.session.$getStringScreenWidth(line)[0];\n      const width = Math.max(chars, 2) * renderer.characterWidth + // text size\n        2 * renderer.$padding + // padding\n        2  + // little extra for the cursor\n        0; // add border width if needed\n\n      return width;\n    }\n\n    /**\n     * Return the longest of an array of strings.\n     * @param {array} lines An array of lines\n     * @return {String} The longest of the lines\n     */\n    function longest(lines) {\n        let longest = '';\n        for (const line of lines) {\n            if (line.length > longest.length) {\n                longest = line;\n            }\n        }\n        return longest;\n    }\n\n    /**\n     * Set up an onchange handler for file uploads. When the user selects\n     * a file, a FileReader is created to read the contents. While the read\n     * is in progress, a data-busy attribute is set. When the read is complete\n     * a data-file-contents object is defined to map name to contents.\n     * @param {HTMLelement} uploadElementId The input element of type file.\n     */\n    async function setupFileHandler(uploadElementId) {\n\n        /**\n         * Read a single file.\n         * @param {file} file A file from an 'input type=file' element filelist.\n         * @returns {Promise} A promise wrapping the given file's contents.\n         */\n        function readOneFile(file){\n            return new Promise((resolve, reject) => {\n              var rdr = new FileReader();\n              rdr.onload = () => {\n                resolve(rdr.result);\n              };\n              rdr.onerror = reject;\n              rdr.readAsText(file);\n            });\n        }\n\n        const element = $('#' + uploadElementId);\n        element.prop('multiple', '1');  // Workaround for the fact Moodle strips this.\n        element.change(async () => {\n            uploadFiles = {};\n            const files = element.prop('files');\n            for (const file of files) {\n                uploadFiles[file.name] = await readOneFile(file);\n            }\n        });\n    }\n\n\n    /**\n     *\n     * @param {html element} pre The pre element that the Ace editor is replacing.\n     * @param {object} uiParameters The UI parameters from the Pre element + defaults.\n     * @param {bool} isInteractive True if the code is interactive.\n     */\n    async function setUpAce(pre, uiParameters, isInteractive) {\n        const aceModeMap = {  // Ace modes for various languages (default: use language name).\n            'c': 'c_cpp',\n            'cpp': 'c_cpp',\n            'js': 'javascript',\n            'nodejs': 'javascript',\n            'c#': 'cs',\n            'octave': 'matlab',\n            'c++': 'c_cpp',\n            'python2': 'python',\n            'python3': 'python'\n        };\n        const darkMode = uiParameters['dark-theme-mode']; // 0, 1, 2 for never, sometimes, always\n        let theme = null;\n\n        // Use light or dark theme according to user's prefers-color-scheme.\n        // Default to light.\n        if (darkMode == 2 || (darkMode == 1 && window.matchMedia &&\n                window.matchMedia(\"(prefers-color-scheme: dark)\").matches)) {\n            theme = ACE_DARK_THEME;\n        } else {\n            theme = ACE_LIGHT_THEME;\n        }\n\n\n        const showLineNumbers = uiParameters['start-line-number'] ? true : false;\n        let aceLang = uiParameters['ace-lang'] ? uiParameters['ace-lang'] : uiParameters.lang;\n        aceLang = aceLang.toLowerCase();\n        if (aceLang in aceModeMap) {\n            aceLang = aceModeMap[aceLang];\n        }\n        const mode = 'ace/mode/' + aceLang;\n        const jqpre = $(pre);\n        const text = jqpre.text();\n        const lines = text.split(\"\\n\");\n        const numLines = lines.length;\n        const longestLine = longest(lines);\n\n        const editNode = $(\"<div></div>\"); // Ace editor manages this\n        const width = pre.scrollWidth;  // Our first guess at a minimum width.\n        const css = {\n            \"margin\": \"6px 0px 6px 0px\", // Top, right, bottom, left\n            \"line-height\": \"1.3\",\n            \"min-width\": width + \"px\"\n        };\n        editNode.css(css);\n        jqpre.after(editNode);    // Insert the edit node\n\n        var aceConfig = {\n            newLineMode: \"unix\",\n            mode: mode,\n            minLines: Math.max(numLines, uiParameters['min-lines']),\n            maxLines: uiParameters['max-lines'],\n            fontSize: uiParameters['font-size'],\n            showLineNumbers: showLineNumbers,\n            firstLineNumber: uiParameters['start-line-number'],\n            showGutter: showLineNumbers,\n            showPrintMargin: false,\n            autoScrollEditorIntoView: true,\n            highlightActiveLine: showLineNumbers\n        };\n\n        const editor = window.ace.edit(editNode.get(0), aceConfig);\n        const session = editor.getSession();\n        const aceWidestLine = lineLength(editor.renderer, longestLine);\n        if (aceWidestLine > width) {\n            editNode.css({'min-width': Math.ceil(aceWidestLine) + \"px\"});\n        }\n        session.setValue(text);\n        editor.setTheme(theme);\n        if (uiParameters.readonly !== null) {\n            editor.setReadOnly(true);\n        }\n\n        // Add a button and text area for output if ace-interactive-code.\n        if (isInteractive) {\n            const getCode = () => editor.getSession().getValue();\n            addUi(editNode, getCode, uiParameters);\n        } else {\n            editor.renderer.$cursorLayer.element.style.display = \"none\"; // Hide cursor.\n        }\n    }\n\n    /**\n     * Replace the given PRE element with an element managed by the Ace editor,\n     * unless 'hidden' is true, in which case we just hide the PRE.\n     * @param {HTMLelement} pre The PRE element to be be replaced by an Ace editor.\n     * @param {bool} isInteractive True for ace-interactive otherwise false.\n     * @param {type} uiParameters the User Interface parameters for the element.\n     */\n    async function applyToPre(pre, isInteractive, uiParameters) {\n        const jqpre = $(pre);\n        if (uiParameters['file-upload-id']) {\n            setupFileHandler(uiParameters['file-upload-id']);\n        }\n\n        if (!uiParameters.hidden) {\n            setUpAce(pre, uiParameters, isInteractive);\n        } else if (isInteractive) { // Code is hidden but there's still a button to run it.\n            const getCode = () => jqpre.text();\n            addUi(pre, getCode, uiParameters);\n        }\n\n        jqpre.hide();  // NB this sets display = 'none', checked above.\n    }\n\n    /**\n     * Replace all <pre> elements in the document rooted at root that have\n     * the given className with an Ace editor windows that display the\n     * code in whatever language has been set.\n     * @param {object} root The root of the HTML document to modify.\n     * @param {bool} isInteractive True for ace-interactive otherwise false.\n     * @param {object} defaultParams An object defining the allowed pre attributes\n     * that control the state of the Ace editor and the (optional) UI.\n     */\n    async function applyAceAndBuildUi(root, isInteractive, defaultParams) {\n        const className = isInteractive ? 'ace-interactive-code' : 'ace-highlight-code';\n        const codeElements = root.getElementsByClassName(className);\n\n        for (const pre of codeElements) {\n            const uiParameters = getUiParameters(pre, defaultParams);\n            if (pre.nodeName === 'PRE' && pre.style.display !== 'none') {\n                applyToPre(pre, isInteractive, uiParameters);\n            }\n        }\n    }\n\n    return {\n        initAceInteractive: async function(config) {\n            if (!window.ace_inline_code_interactive_done) { // Do it once only.\n                window.ace_inline_code_interactive_done = true;\n                while (!window.ace) {\n                    await new Promise(resolve => setTimeout(resolve, 1000));\n                }\n                applyAceInteractive(document, config);\n                // Add a hook for use by dynamically generated content.\n                window.applyAceInteractive = function () {\n                    applyAceInteractive(document, config);\n                };\n            }\n        },\n        initAceHighlighting: async function(config) {\n            if (!window.ace_inline_code_highlighting_done) { // Do it once only.\n                window.ace_inline_code_highlighting_done = true;\n                while (!window.ace) {\n                    await new Promise(resolve => setTimeout(resolve, 1000));\n                }\n                applyAceHighlighting(document, config);\n                // Add a hook for use by dynamically generated content.\n                window.applyAceHighlighting = function () {\n                    applyAceHighlighting(document, config);\n                };\n            }\n        }\n    };\n});"],"names":["define","$","uploadFiles","escapeHtml","text","map","replace","m","getUiParameters","pre","defaultParams","uiParameters","attrName","hasOwnProperty","value","dataName","attr","attributes","getNamedItem","toLowerCase","parseInt","setLangString","langStringName","additionalText","outputTextArea","require","str","promise","get_string","when","done","message","html","combinedOutput","response","maxLen","limit","s","length","substr","cmpinfo","output","stderr","getStdin","taid","stdin","val","getFiles","taids","isEmptyObject","JSON","parse","SyntaxError","Promise","resolve","filename","id","name","stringify","createTextNode","css","overflowWrap","whiteSpace","width","overflow","maxHeight","marginTop","marginBottom","handleOutput","outputDisplayArea","append","cleanOutput","next","remove","backgroundColor","addUi","insertionPoint","getCode","button","padding","buttonDiv","verticalAlign","after","hide","M","util","js_pending","ajax","on","code","show","mapFunc","window","prefix","suffix","border","textArea","handleButtonClick","htmlOutput","call","methodname","args","contextid","cfg","sourcecode","language","lang","files","params","responseJson","error","ERROR_RESPONSES","row","result","diagnose","extra","fail","executeCode","js_complete","applyAceHighlighting","root","config","applyAceAndBuildUi","dark_theme_mode","applyAceInteractive","button_label","setUpAce","isInteractive","aceModeMap","darkMode","theme","matchMedia","matches","showLineNumbers","aceLang","mode","jqpre","lines","split","numLines","longestLine","longest","line","editNode","scrollWidth","aceConfig","newLineMode","minLines","Math","max","maxLines","fontSize","firstLineNumber","showGutter","showPrintMargin","autoScrollEditorIntoView","highlightActiveLine","editor","ace","edit","get","session","getSession","aceWidestLine","renderer","chars","$getStringScreenWidth","characterWidth","$padding","lineLength","ceil","setValue","setTheme","readonly","setReadOnly","getValue","$cursorLayer","element","style","display","applyToPre","uploadElementId","readOneFile","file","reject","rdr","FileReader","onload","onerror","readAsText","prop","change","async","setupFileHandler","hidden","className","codeElements","getElementsByClassName","nodeName","initAceInteractive","ace_inline_code_interactive_done","setTimeout","document","initAceHighlighting","ace_inline_code_highlighting_done"],"mappings":"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"}