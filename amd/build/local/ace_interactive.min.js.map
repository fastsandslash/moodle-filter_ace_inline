{"version":3,"file":"ace_interactive.min.js","sources":["../../src/local/ace_interactive.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for the ace interactive part.\n *\n * @module     filter_ace_inline/local/ace_interactive\n * @copyright  Richard Lobb, Michelle Hsieh 2022\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {createComponent, combinedOutput, diagnose, escapeHtml, getLangString} from \"filter_ace_inline/local/utils\";\nimport {getFiles} from \"filter_ace_inline/local/file_helpers\";\nimport {processCode} from \"filter_ace_inline/local/repository\";\n\nconst RESULT_SUCCESS = 15;  // Code for a correct Jobe run.\n\n/**\n * Handle a click on the Try it! button; pre-checks the taids for valid ids.\n * @param {html_element} outputDisplayArea The HTML <p> element in which to display output.\n * @param {string} code The code to be run.\n * @param {Object} uiParameters The various parameters (mostly attributes of the pre element).\n * Keys are button-name, lang, stdin, files, params, prefix, suffix, codemapper, html-output.\n * @returns {string} code of the code to run, else null but executes errors if needed.\n */\nexport const handleButtonClick = async (outputDisplayArea, code, uiParameters) => {\n    cleanOutput(outputDisplayArea);\n    let errorText = '';\n    const params = uiParameters.paramsMap;\n    outputDisplayArea.style.display = '';\n    // Handle languages at this state.\n    uiParameters.setExecLang(params['lang']);\n    uiParameters.setHtmlOutput(params['html-output']);\n\n    const mapFunc = params['code-mapper'];\n    if (mapFunc in window) {\n        code = window[mapFunc](code);\n    } else if (mapFunc !== null) {\n        errorText = await getLangString('error_script_unknown');\n    }\n\n    code = params.prefix + code + params.suffix;\n    // Get the parameters by parsing.\n    uiParameters.setStdin();\n    uiParameters.setFiles(await getFiles(uiParameters));\n    // If html/markup is the chosen language; change uiParameters and wrap in Python.\n    if ((params['lang'] === 'markup') || (params['lang'] === 'html')) {\n        outputDisplayArea.setAttribute('class', 'filter-ace-inline-output-html');\n        uiParameters.setHtmlOutput(true);\n        uiParameters.setExecLang('python3');\n        code = \"print('''\" + code + \"''')\";\n    }\n\n    // Check if params is a good JSON string.\n    try {\n        // Adds any uploaded files onto the uiParams and resets uiParams sandbox params.\n        let sandboxParams = JSON.parse(params['params']);\n        if (sandboxParams.hasOwnProperty('runargs')) {\n            sandboxParams['runargs'] = sandboxParams['runargs'].concat(uiParameters.sandboxParams);\n        } else {\n            sandboxParams['runargs'] = uiParameters.sandboxParams;\n        }\n        uiParameters.setRunParams(JSON.stringify(sandboxParams));\n    } catch (SyntaxError) {\n        errorText = await getLangString('error_json_params');\n    }\n\n    // If there is a bad id.\n    if (uiParameters.stdin === null || uiParameters.files === 'bad_id') {\n        errorText = await getLangString('error_element_unknown');\n    }\n\n    // Make it display a User error if there is an error and return no code.\n    if (errorText !== '') {\n        let text = '*** ' +  await getLangString('error_user_params') + ' ***\\n' + errorText;\n        outputDisplayArea.setAttribute('class', 'filter-ace-inline-output-user');\n        outputDisplayArea.children.item(0).innerHTML = escapeHtml(text);\n        return null;\n    }\n\n    return code;\n};\n\n/**\n * Executes the code through CodeRunner run_in_sandbox.\n * @param {html_element} outputDisplayArea The HTML <p> element in which to display output.\n * @param {string} code The code to be run.\n * @param {int} uiParameters The various parameters (mostly attributes of the pre element).\n * Keys are button-name, lang, stdin, files, params, prefix, suffix, codemapper, html-output.\n */\nexport const executeCode = async (outputDisplayArea, code, uiParameters) => {\n    await processCode(code, uiParameters).then(responseJson => {\n        displaySuccess(responseJson, outputDisplayArea, uiParameters);\n    })\n        .catch(error => {\n            cleanOutput(outputDisplayArea);\n            // Change the outputDisplayArea to something more ominious...\n            outputDisplayArea.setAttribute('class', 'filter-ace-inline-output-user');\n            displayTextOutput(error.message, 'error_user_params', outputDisplayArea);\n    });\n};\n\n/**\n * Displays the output of the successful AJAX promise.\n * @param {JSON} responseJson The Json object response.\n * @param {Element} outputDisplayArea The area to have the text displayed.\n * @param {Object} uiParameters The UiParameters object that contains all the bits.\n */\nconst displaySuccess = (responseJson, outputDisplayArea, uiParameters) => {\n    let text = '';\n    let langString = '';\n    const params = uiParameters.paramsMap;\n    const htmlOutput = uiParameters.htmlOutput !== null;\n    const maxLen = params['max-output-length'];\n\n    cleanOutput(outputDisplayArea);\n    const response = JSON.parse(responseJson);\n    const error = diagnose(response);\n    if (error === '') {\n        // If no errors or compilation error or runtime error.\n        if (!htmlOutput || response.result !== RESULT_SUCCESS) {\n            // Either it's not HTML output or it is but we have compilation or runtime errors.\n            text += combinedOutput(response, maxLen);\n            // If there is an execution error, change the output class.\n            if (response.result !== RESULT_SUCCESS) {\n                outputDisplayArea.setAttribute('class', 'filter-ace-inline-output-error');\n            }\n        } else { // Valid HTML output - just plug in the raw html to the DOM.\n            outputDisplayArea.setAttribute('class', 'filter-ace-inline-output-html');\n            const html = createComponent('div', ['filter-ace-inline-html'], {});\n            html.innerHTML = response.output;\n            outputDisplayArea.after(html);\n        }\n    } else {\n        // If an error occurs, display the language string in the\n        // outputDisplayArea plus additional info, for non-sandbox errors.\n        outputDisplayArea.setAttribute('class', 'filter-ace-inline-output-error');\n        let extra = response.error == 0 ? combinedOutput(response, maxLen) : '';\n        if (error === 'error_unknown_runtime') {\n            extra += response.error ? '(Sandbox error code ' + response.error + ')' :\n                '(Run result: ' + response.result + ')';\n        }\n        langString += error;\n        text += extra;\n    }\n   displayTextOutput(text, langString, outputDisplayArea);\n};\n\n\n/**\n * Displays the text in the specified outputdisplay area.\n * @param {string} text Test to be displayed\n * @param {string} langString LangString for error-handling.\n * @param {html_element} outputDisplayArea The HTML <p> element in which to display output.\n */\nconst displayTextOutput = async (text, langString, outputDisplayArea) => {\n    if (langString !== '') {\n        text = \"*** \" + await getLangString(langString) + \" ***\\n\" + text;\n    }\n    outputDisplayArea.children.item(0).innerHTML = escapeHtml(text);\n};\n\n/**\n * Cleans the outputDisplayArea and resets to normal, removing any next nodes found.\n * html objects.\n * @param {type} outputDisplayArea Resets the output box.\n */\nconst cleanOutput = (outputDisplayArea) => {\n    outputDisplayArea.children.item(0).innerHTML = '';\n    const potentialHtml = outputDisplayArea.nextElementSibling;\n    if (potentialHtml !== null) {\n        if (potentialHtml.className === 'filter-ace-inline-html') {\n             outputDisplayArea.parentNode.removeChild(outputDisplayArea.nextSibling);\n        }\n    }\n    outputDisplayArea.setAttribute('class', 'filter-ace-inline-output-display');\n};\n"],"names":["async","outputDisplayArea","code","uiParameters","cleanOutput","errorText","params","paramsMap","style","display","setExecLang","setHtmlOutput","mapFunc","window","prefix","suffix","setStdin","setFiles","setAttribute","sandboxParams","JSON","parse","hasOwnProperty","concat","setRunParams","stringify","SyntaxError","stdin","files","text","children","item","innerHTML","then","responseJson","displaySuccess","catch","error","displayTextOutput","message","langString","htmlOutput","maxLen","response","result","html","output","after","extra","potentialHtml","nextElementSibling","className","parentNode","removeChild","nextSibling"],"mappings":"wWAuCiCA,MAAOC,kBAAmBC,KAAMC,gBAC7DC,YAAYH,uBACRI,UAAY,SACVC,OAASH,aAAaI,UAC5BN,kBAAkBO,MAAMC,QAAU,GAElCN,aAAaO,YAAYJ,OAAM,MAC/BH,aAAaQ,cAAcL,OAAO,sBAE5BM,QAAUN,OAAO,eACnBM,WAAWC,OACXX,KAAOW,OAAOD,SAASV,MACJ,OAAZU,UACPP,gBAAkB,wBAAc,yBAGpCH,KAAOI,OAAOQ,OAASZ,KAAOI,OAAOS,OAErCZ,aAAaa,WACbb,aAAac,eAAe,0BAASd,eAEb,WAAnBG,OAAM,MAA8C,SAAnBA,OAAM,OACxCL,kBAAkBiB,aAAa,QAAS,iCACxCf,aAAaQ,eAAc,GAC3BR,aAAaO,YAAY,WACzBR,KAAO,YAAcA,KAAO,gBAMxBiB,cAAgBC,KAAKC,MAAMf,OAAM,QACjCa,cAAcG,eAAe,WAC7BH,cAAa,QAAcA,cAAa,QAAYI,OAAOpB,aAAagB,eAExEA,cAAa,QAAchB,aAAagB,cAE5ChB,aAAaqB,aAAaJ,KAAKK,UAAUN,gBAC3C,MAAOO,aACLrB,gBAAkB,wBAAc,wBAIT,OAAvBF,aAAawB,OAAyC,WAAvBxB,aAAayB,QAC5CvB,gBAAkB,wBAAc,0BAIlB,KAAdA,UAAkB,KACdwB,KAAO,aAAgB,wBAAc,qBAAuB,SAAWxB,iBAC3EJ,kBAAkBiB,aAAa,QAAS,iCACxCjB,kBAAkB6B,SAASC,KAAK,GAAGC,WAAY,qBAAWH,MACnD,YAGJ3B,2BAUgBF,MAAOC,kBAAmBC,KAAMC,sBACjD,2BAAYD,KAAMC,cAAc8B,MAAKC,eACvCC,eAAeD,aAAcjC,kBAAmBE,iBAE/CiC,OAAMC,QACHjC,YAAYH,mBAEZA,kBAAkBiB,aAAa,QAAS,iCACxCoB,kBAAkBD,MAAME,QAAS,oBAAqBtC,6BAU5DkC,eAAiB,CAACD,aAAcjC,kBAAmBE,oBACjD0B,KAAO,GACPW,WAAa,SACXlC,OAASH,aAAaI,UACtBkC,WAAyC,OAA5BtC,aAAasC,WAC1BC,OAASpC,OAAO,qBAEtBF,YAAYH,yBACN0C,SAAWvB,KAAKC,MAAMa,cACtBG,OAAQ,mBAASM,aACT,KAAVN,SAEKI,YAzGU,KAyGIE,SAASC,OAOrB,CACH3C,kBAAkBiB,aAAa,QAAS,uCAClC2B,MAAO,0BAAgB,MAAO,CAAC,0BAA2B,IAChEA,KAAKb,UAAYW,SAASG,OAC1B7C,kBAAkB8C,MAAMF,WATxBhB,OAAQ,yBAAec,SAAUD,QA3GtB,KA6GPC,SAASC,QACT3C,kBAAkBiB,aAAa,QAAS,sCAQ7C,CAGHjB,kBAAkBiB,aAAa,QAAS,sCACpC8B,MAA0B,GAAlBL,SAASN,OAAa,yBAAeM,SAAUD,QAAU,GACvD,0BAAVL,QACAW,OAASL,SAASN,MAAQ,uBAAyBM,SAASN,MAAQ,IAChE,gBAAkBM,SAASC,OAAS,KAE5CJ,YAAcH,MACdR,MAAQmB,MAEbV,kBAAkBT,KAAMW,WAAYvC,oBAUjCqC,kBAAoBtC,MAAO6B,KAAMW,WAAYvC,qBAC5B,KAAfuC,aACAX,KAAO,aAAe,wBAAcW,YAAc,SAAWX,MAEjE5B,kBAAkB6B,SAASC,KAAK,GAAGC,WAAY,qBAAWH,OAQxDzB,YAAeH,oBACjBA,kBAAkB6B,SAASC,KAAK,GAAGC,UAAY,SACzCiB,cAAgBhD,kBAAkBiD,mBAClB,OAAlBD,eACgC,2BAA5BA,cAAcE,WACblD,kBAAkBmD,WAAWC,YAAYpD,kBAAkBqD,aAGpErD,kBAAkBiB,aAAa,QAAS"}