{"version":3,"file":"file_helpers.min.js","sources":["../../src/modules/file_helpers.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for helping parse files and pseudofiles.\n *\n * @module     filter_ace_inline/file_helpers\n * @copyright  Richard Lobb, Michelle Hsieh 2022\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nlet uploadFiles = {};\n\n/**\n * Gets the uiParameter 'file-taids' and parses it if it is JSON. Promises an\n * arbitrary non-JSON object for error handling in the run_in_sandbox.php, else\n * promises a JSON object of appropriate mappings\n *\n * @param {object} uiParameters The various parameters (mostly attributes of the pre element)\n * @returns {string} An JSON-encoding of an object that defines one or more\n * filename:filecontents mappings.\n */\nexport const getFiles = async (uiParameters) => {\n    let taids = uiParameters.paramsMap['file-taids'];\n    let map = {};\n\n    if (Object.keys(taids).length !== 0) {\n        // Catches JSON parse errors for file names.\n        try {\n            taids = JSON.parse(taids);\n        } catch (SyntaxError) {\n            return Promise.resolve('error');\n        }\n        for (const filename in taids) {\n            if (taids.hasOwnProperty(filename)) {\n                const id = taids[filename];\n                const file = document.querySelector('#' + id);\n                if (file === null) {\n                    return Promise.resolve('bad_id');\n                } else {\n                    map[filename] = file.value;\n                }\n            }\n        }\n    }\n\n    // Merge in any explicitly uploaded files.\n    for (const name in uploadFiles) {\n        if (uploadFiles.hasOwnProperty(name)) {\n            map[name] = uploadFiles[name]; // Copy contents across.\n        }\n    }\n    return Promise.resolve(JSON.stringify(map));\n};\n\n/**\n * Set up an onchange handler for file uploads. When the user selects\n * a file, a FileReader is created to read the contents. While the read\n * is in progress, a data-busy attribute is set. When the read is complete\n * a data-file-contents object is defined to map name to contents.\n * @param {HTMLelement} uploadElementId The input element of type file.\n */\nexport const setupFileHandler = async (uploadElementId) => {\n\n    /**\n     * Read a single file.\n     * @param {file} file A file from an 'input type=file' element filelist.\n     * @returns {Promise} A promise wrapping the given file's contents.\n     */\n    function readOneFile(file){\n        return new Promise((resolve, reject) => {\n          let rdr = new FileReader();\n          rdr.onload = () => {\n            resolve(rdr.result);\n          };\n          rdr.onerror = reject;\n          rdr.readAsText(file);\n        });\n    }\n\n    const element = document.querySelector('#' + uploadElementId);\n    element.setAttribute('multiple', '1');  // Workaround for the fact Moodle strips this.\n    element.addEventListener('change', async () => {\n        uploadFiles = {};\n        const files = element.files;\n        for (const file of files) {\n            uploadFiles[file.name] = await readOneFile(file);\n        }\n    });\n};\n"],"names":["uploadFiles","async","taids","uiParameters","paramsMap","map","Object","keys","length","JSON","parse","SyntaxError","Promise","resolve","filename","hasOwnProperty","id","file","document","querySelector","value","name","stringify","readOneFile","reject","rdr","FileReader","onload","result","onerror","readAsText","element","uploadElementId","setAttribute","addEventListener","files"],"mappings":";;;;;;;;IAyBIA,YAAc,qBAWMC,MAAAA,mBAChBC,MAAQC,aAAaC,UAAU,cAC/BC,IAAM,MAEwB,IAA9BC,OAAOC,KAAKL,OAAOM,OAAc,KAG7BN,MAAQO,KAAKC,MAAMR,OACrB,MAAOS,oBACEC,QAAQC,QAAQ,aAEtB,MAAMC,YAAYZ,SACfA,MAAMa,eAAeD,UAAW,OAC1BE,GAAKd,MAAMY,UACXG,KAAOC,SAASC,cAAc,IAAMH,OAC7B,OAATC,YACOL,QAAQC,QAAQ,UAEvBR,IAAIS,UAAYG,KAAKG,WAOhC,MAAMC,QAAQrB,YACXA,YAAYe,eAAeM,QAC3BhB,IAAIgB,MAAQrB,YAAYqB,cAGzBT,QAAQC,QAAQJ,KAAKa,UAAUjB,iCAUVJ,MAAAA,2BAOnBsB,YAAYN,aACV,IAAIL,SAAQ,CAACC,QAASW,cACvBC,IAAM,IAAIC,WACdD,IAAIE,OAAS,KACXd,QAAQY,IAAIG,SAEdH,IAAII,QAAUL,OACdC,IAAIK,WAAWb,eAIfc,QAAUb,SAASC,cAAc,IAAMa,iBAC7CD,QAAQE,aAAa,WAAY,KACjCF,QAAQG,iBAAiB,UAAUjC,UAC/BD,YAAc,SACRmC,MAAQJ,QAAQI,UACjB,MAAMlB,QAAQkB,MACfnC,YAAYiB,KAAKI,YAAcE,YAAYN"}